{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/influencer/influencer/frontend/src/components/ChatComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './ChatComponent.css'; // Assume you have a CSS file for styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatComponent = () => {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [selectedVoice, setSelectedVoice] = useState('');\n  const [selectedLanguage, setSelectedLanguage] = useState('');\n  const [chatMessages, setChatMessages] = useState([]);\n  const [voices, setVoices] = useState([]);\n  const [languages, setLanguages] = useState([]);\n  const [isSending, setIsSending] = useState(false);\n  const [selectedIdPair, setSelectedIdPair] = useState({});\n  const [idPairs, setIdPairs] = useState([]); // State to hold the list of ID pairs\n  const serverBaseUrl = 'http://3.35.238.210:5000';\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        console.log('Fetching config data from server...');\n        const response = await fetch(`${serverBaseUrl}/config`);\n        if (response.ok) {\n          const data = await response.json();\n          const voiceEntries = Object.entries(data.voices).map(([label, value]) => ({\n            label,\n            value\n          }));\n          const languageEntries = Object.entries(data.languages).map(([label, value]) => ({\n            label,\n            value\n          }));\n          const idPairEntries = Object.entries(data.id_pairs).map(([label, ids]) => ({\n            label,\n            value: ids // Here ids is an object { ID1: \"xxx\", ID2: \"yyy\" }\n          }));\n\n          setIdPairs(idPairEntries);\n          setVoices(voiceEntries);\n          setLanguages(languageEntries);\n          if (idPairEntries.length > 0) {\n            setSelectedIdPair(idPairEntries[0].value);\n          }\n\n          // Set default selected values\n          if (idPairEntries.length > 0) {\n            setSelectedIdPair(idPairEntries[0].value);\n          }\n          if (voiceEntries.length > 0) {\n            setSelectedVoice(voiceEntries[0].value);\n          }\n          if (languageEntries.length > 0) {\n            setSelectedLanguage(languageEntries[0].value);\n          }\n        } else {\n          console.error('Failed to fetch data from the server:', response.statusText);\n        }\n      } catch (error) {\n        console.error('An error occurred while fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const [userName, setUserName] = useState('User');\n  useEffect(() => {\n    console.log('Voices:', voices);\n    console.log('Languages:', languages);\n  }, [voices, languages]);\n  const getVoiceLabel = voiceValue => {\n    const voice = voices.find(v => v.value === voiceValue);\n    return voice ? voice.label : 'Bot';\n  };\n  const sendMessage = async () => {\n    if (!userInput.trim()) {\n      console.log('No input to send');\n      return;\n    }\n    setIsSending(true);\n    setChatMessages(prevMessages => [...prevMessages, {\n      type: 'user',\n      name: userName,\n      text: userInput\n    }]);\n    setUserInput('');\n    try {\n      const combinedInput = `${selectedLanguage}:${userInput}`;\n\n      // Make sure actualSelectedPair is defined from selectedIdPair state\n      const actualSelectedPair = selectedIdPair;\n\n      // Check that actualSelectedPair has the required properties\n      if (!actualSelectedPair || !actualSelectedPair.ID1 || !actualSelectedPair.ID2) {\n        console.error('Selected ID pair is invalid:', actualSelectedPair);\n        return;\n      }\n      const requestBody = {\n        user_input: combinedInput,\n        selected_voice: selectedVoice,\n        selected_language: selectedLanguage,\n        selected_id_pair_key: {\n          ID1: actualSelectedPair.ID1,\n          ID2: actualSelectedPair.ID2\n        }\n      };\n      const response = await fetch(`${serverBaseUrl}/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n      if (response.ok) {\n        const responseData = await response.json();\n\n        // Update chatMessages state with the bot's message\n        setChatMessages(prevMessages => [...prevMessages, {\n          type: 'bot',\n          text: responseData.text\n        }]);\n\n        // Play the audio (if needed)\n        const audio = new Audio('data:audio/mpeg;base64,' + responseData.audio);\n        audio.play();\n      } else {\n        console.error('Failed to send message to the server:', response.statusText);\n      }\n    } catch (error) {\n      console.error('An error occurred:', error);\n    } finally {\n      setIsSending(false); // Re-enable the send button whether there was an error or not\n    }\n  };\n\n  const handleIdPairChange = e => {\n    const selectedLabel = e.target.value;\n    const selectedPair = idPairs.find(pair => pair.label === selectedLabel);\n    setSelectedIdPair(selectedPair ? selectedPair.value : null);\n  };\n  const handleLanguageChange = e => {\n    console.log('Language selected:', e.target.value);\n    setSelectedLanguage(e.target.value);\n  };\n  useEffect(() => {\n    console.log('Selected language state updated to:', selectedLanguage);\n  }, [selectedLanguage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-config\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"idPairs\",\n        value: selectedIdPair ? selectedIdPair.label : '',\n        onChange: handleIdPairChange,\n        children: idPairs.map((pair, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: pair.label,\n          children: pair.label\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"voices\",\n        value: selectedVoice,\n        onChange: e => setSelectedVoice(e.target.value),\n        children: voices.map((voice, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: voice.value,\n          children: voice.label\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"languages\",\n        value: selectedLanguage,\n        onChange: e => setSelectedLanguage(e.target.value),\n        children: languages.map((language, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: language.value,\n          children: language.label\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: chatMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.type}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-name\",\n          children: msg.type === 'user' ? `${userName}:` : `${getVoiceLabel(selectedVoice)}:`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-text\",\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        disabled: isSending,\n        onKeyDown: e => {\n          if (e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault();\n            sendMessage();\n          }\n        },\n        placeholder: \"Type your message here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        disabled: !userInput.trim() || isSending,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatComponent, \"AfQUMXPgzJIqpgT/5mMlXTsDJ+k=\");\n_c = ChatComponent;\nexport default ChatComponent;\nvar _c;\n$RefreshReg$(_c, \"ChatComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ChatComponent","_s","userInput","setUserInput","selectedVoice","setSelectedVoice","selectedLanguage","setSelectedLanguage","chatMessages","setChatMessages","voices","setVoices","languages","setLanguages","isSending","setIsSending","selectedIdPair","setSelectedIdPair","idPairs","setIdPairs","serverBaseUrl","fetchData","console","log","response","fetch","ok","data","json","voiceEntries","Object","entries","map","label","value","languageEntries","idPairEntries","id_pairs","ids","length","error","statusText","userName","setUserName","getVoiceLabel","voiceValue","voice","find","v","sendMessage","trim","prevMessages","type","name","text","combinedInput","actualSelectedPair","ID1","ID2","requestBody","user_input","selected_voice","selected_language","selected_id_pair_key","method","headers","body","JSON","stringify","responseData","audio","Audio","play","handleIdPairChange","e","selectedLabel","target","selectedPair","pair","handleLanguageChange","className","children","id","onChange","index","fileName","_jsxFileName","lineNumber","columnNumber","language","msg","disabled","onKeyDown","key","shiftKey","preventDefault","placeholder","onClick","_c","$RefreshReg$"],"sources":["/home/ubuntu/influencer/influencer/frontend/src/components/ChatComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './ChatComponent.css'; // Assume you have a CSS file for styles\n\nconst ChatComponent = () => {\n  const [userInput, setUserInput] = useState('');\n  const [selectedVoice, setSelectedVoice] = useState('');\n  const [selectedLanguage, setSelectedLanguage] = useState('');\n  const [chatMessages, setChatMessages] = useState([]);\n  const [voices, setVoices] = useState([]);\n  const [languages, setLanguages] = useState([]);\n  const [isSending, setIsSending] = useState(false);\n  const [selectedIdPair, setSelectedIdPair] = useState({});\n  const [idPairs, setIdPairs] = useState([]); // State to hold the list of ID pairs\n  const serverBaseUrl = 'http://3.35.238.210:5000';\n\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        console.log('Fetching config data from server...');\n        const response = await fetch(`${serverBaseUrl}/config`);\n        if (response.ok) {\n          const data = await response.json();\n          const voiceEntries = Object.entries(data.voices).map(([label, value]) => ({ label, value }));\n          const languageEntries = Object.entries(data.languages).map(([label, value]) => ({ label, value }));\n          const idPairEntries = Object.entries(data.id_pairs).map(([label, ids]) => ({\n            label,\n            value: ids, // Here ids is an object { ID1: \"xxx\", ID2: \"yyy\" }\n          }));\n          setIdPairs(idPairEntries);\n          setVoices(voiceEntries);\n          setLanguages(languageEntries);\n          if (idPairEntries.length > 0) {\n            setSelectedIdPair(idPairEntries[0].value);\n          }\n\n          \n          // Set default selected values\n          if (idPairEntries.length > 0) {\n            setSelectedIdPair(idPairEntries[0].value);\n          }\n          \n          if (voiceEntries.length > 0) {\n            setSelectedVoice(voiceEntries[0].value);\n          }\n          if (languageEntries.length > 0) {\n            setSelectedLanguage(languageEntries[0].value);\n          }\n        } else {\n          console.error('Failed to fetch data from the server:', response.statusText);\n        }\n      } catch (error) {\n        console.error('An error occurred while fetching data:', error);\n      }\n    };\n  \n    fetchData();\n  }, []);\n  \n  const [userName, setUserName] = useState('User');\n\n  useEffect(() => {\n    console.log('Voices:', voices);\n    console.log('Languages:', languages);\n  }, [voices, languages]);\n\n  const getVoiceLabel = (voiceValue) => {\n    const voice = voices.find(v => v.value === voiceValue);\n    return voice ? voice.label : 'Bot';\n  };\n  \n  const sendMessage = async () => {\n    if (!userInput.trim()) {\n      console.log('No input to send');\n      return;\n    }\n  \n    setIsSending(true);\n  \n    setChatMessages(prevMessages => [\n      ...prevMessages,\n      { type: 'user', name: userName, text: userInput }\n    ]);\n  \n    setUserInput('');\n  \n    try {\n      const combinedInput = `${selectedLanguage}:${userInput}`;\n      \n      // Make sure actualSelectedPair is defined from selectedIdPair state\n      const actualSelectedPair = selectedIdPair;\n    \n      // Check that actualSelectedPair has the required properties\n      if (!actualSelectedPair || !actualSelectedPair.ID1 || !actualSelectedPair.ID2) {\n        console.error('Selected ID pair is invalid:', actualSelectedPair);\n        return;\n      }\n\n      const requestBody = {\n        user_input: combinedInput,\n        selected_voice: selectedVoice,\n        selected_language: selectedLanguage,\n        selected_id_pair_key: {\n          ID1: actualSelectedPair.ID1,\n          ID2: actualSelectedPair.ID2,\n        },\n      };\n\n      const response = await fetch(`${serverBaseUrl}/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody),\n      });\n  \n      if (response.ok) {\n        const responseData = await response.json();\n        \n        // Update chatMessages state with the bot's message\n        setChatMessages(prevMessages => [\n          ...prevMessages,\n          { type: 'bot', text: responseData.text },\n        ]);\n        \n        // Play the audio (if needed)\n        const audio = new Audio('data:audio/mpeg;base64,' + responseData.audio);\n        audio.play();\n      } else {\n        console.error('Failed to send message to the server:', response.statusText);\n      }\n    } catch (error) {\n      console.error('An error occurred:', error);\n    } finally {\n      setIsSending(false); // Re-enable the send button whether there was an error or not\n    }\n  };\n  const handleIdPairChange = (e) => {\n    const selectedLabel = e.target.value;\n    const selectedPair = idPairs.find(pair => pair.label === selectedLabel);\n    setSelectedIdPair(selectedPair ? selectedPair.value : null);\n  };\n\n  const handleLanguageChange = (e) => {\n    console.log('Language selected:', e.target.value);\n    setSelectedLanguage(e.target.value);\n  };\n\n  useEffect(() => {\n    console.log('Selected language state updated to:', selectedLanguage);\n  }, [selectedLanguage]);\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-config\">\n      <select id=\"idPairs\" value={selectedIdPair ? selectedIdPair.label : ''} onChange={handleIdPairChange}>\n        {idPairs.map((pair, index) => (\n          <option key={index} value={pair.label}>\n            {pair.label}\n          </option>\n        ))}\n      </select>\n        <select id=\"voices\" value={selectedVoice} onChange={(e) => setSelectedVoice(e.target.value)}>\n          {voices.map((voice, index) => (\n            <option key={index} value={voice.value}>\n              {voice.label}\n            </option>\n          ))}\n        </select>\n        <select id=\"languages\" value={selectedLanguage} onChange={(e) => setSelectedLanguage(e.target.value)}>\n          {languages.map((language, index) => (\n            <option key={index} value={language.value}>\n              {language.label}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"chat-messages\">\n        {chatMessages.map((msg, index) => (\n          <div key={index} className={`message ${msg.type}`}>\n            <span className=\"message-name\">\n              {msg.type === 'user' ? `${userName}:` : `${getVoiceLabel(selectedVoice)}:`}\n            </span>\n            <span className=\"message-text\">{msg.text}</span>\n          </div>\n        ))}\n      </div>\n      <div className=\"chat-input\">\n      <textarea\n     value={userInput}\n     onChange={(e) => setUserInput(e.target.value)}\n     disabled={isSending}\n     onKeyDown={(e) => {\n       if (e.key === 'Enter' && !e.shiftKey) {\n         e.preventDefault();\n         sendMessage();\n       }\n     }}\n     placeholder=\"Type your message here...\"\n  />\n  <button onClick={sendMessage} disabled={!userInput.trim() || isSending}>\n    Send\n  </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}