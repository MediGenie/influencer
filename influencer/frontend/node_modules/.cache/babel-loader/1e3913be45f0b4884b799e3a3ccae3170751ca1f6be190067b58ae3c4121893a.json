{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Downloads\\\\\\uCD5C\\uC885\\uC0B0\\uCD9C\\uBB3C (1)\\\\\\uCD5C\\uC885\\uC0B0\\uCD9C\\uBB3C\\\\AI_Plaza-main\\\\influencer\\\\influencer\\\\frontend\\\\src\\\\components\\\\ChatComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatComponent = () => {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [selectedVoice, setSelectedVoice] = useState('');\n  const [selectedLanguage, setSelectedLanguage] = useState('');\n  const [chatMessages, setChatMessages] = useState([]);\n  const [voices, setVoices] = useState([]);\n  const [languages, setLanguages] = useState([]);\n  const sendMessage = async () => {\n    try {\n      // Create a new message object for the user's message\n      const userMessage = {\n        type: 'user',\n        text: userInput\n      };\n\n      // Update the chatMessages state with the user's message\n      setChatMessages([...chatMessages, userMessage]);\n\n      // Send the user's message to the server\n      const requestBody = {\n        user_input: userInput,\n        selected_voice: selectedVoice,\n        selected_language: selectedLanguage\n      };\n      const response = await fetch('/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n      if (response.ok) {\n        const responseData = await response.json();\n\n        // Create a new message object for the bot's response\n        const botMessage = {\n          type: 'bot',\n          text: responseData.text\n        };\n\n        // Update the chatMessages state with the bot's response\n        setChatMessages([...chatMessages, botMessage]);\n\n        // Play the audio (if needed)\n        const audio = new Audio('data:audio/mpeg;base64,' + responseData.audio);\n        audio.play();\n      } else {\n        console.error('Failed to fetch data from the server.');\n      }\n    } catch (error) {\n      console.error('An error occurred:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"voices\",\n        value: selectedVoice,\n        onChange: e => setSelectedVoice(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"languages\",\n        value: selectedLanguage,\n        onChange: e => setSelectedLanguage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat\",\n      children: chatMessages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: message.type,\n        children: [message.type === 'user' ? 'You' : 'Bot', \": \", message.text]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: userInput,\n      onChange: e => setUserInput(e.target.value),\n      id: \"user_input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatComponent, \"euZKB2590lFJkKlwW3XZJimgkuE=\");\n_c = ChatComponent;\nexport default ChatComponent;\nvar _c;\n$RefreshReg$(_c, \"ChatComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ChatComponent","_s","userInput","setUserInput","selectedVoice","setSelectedVoice","selectedLanguage","setSelectedLanguage","chatMessages","setChatMessages","voices","setVoices","languages","setLanguages","sendMessage","userMessage","type","text","requestBody","user_input","selected_voice","selected_language","response","fetch","method","headers","body","JSON","stringify","ok","responseData","json","botMessage","audio","Audio","play","console","error","children","id","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","className","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Downloads/최종산출물 (1)/최종산출물/AI_Plaza-main/influencer/influencer/frontend/src/components/ChatComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst ChatComponent = () => {\r\n  const [userInput, setUserInput] = useState('');\r\n  const [selectedVoice, setSelectedVoice] = useState('');\r\n  const [selectedLanguage, setSelectedLanguage] = useState('');\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [voices, setVoices] = useState([]);\r\n  const [languages, setLanguages] = useState([]);\r\n\r\n  const sendMessage = async () => {\r\n    try {\r\n      // Create a new message object for the user's message\r\n      const userMessage = {\r\n        type: 'user',\r\n        text: userInput,\r\n      };\r\n\r\n      // Update the chatMessages state with the user's message\r\n      setChatMessages([...chatMessages, userMessage]);\r\n\r\n      // Send the user's message to the server\r\n      const requestBody = {\r\n        user_input: userInput,\r\n        selected_voice: selectedVoice,\r\n        selected_language: selectedLanguage,\r\n      };\r\n\r\n      const response = await fetch('/chat', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(requestBody),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const responseData = await response.json();\r\n\r\n        // Create a new message object for the bot's response\r\n        const botMessage = {\r\n          type: 'bot',\r\n          text: responseData.text,\r\n        };\r\n\r\n        // Update the chatMessages state with the bot's response\r\n        setChatMessages([...chatMessages, botMessage]);\r\n\r\n        // Play the audio (if needed)\r\n        const audio = new Audio('data:audio/mpeg;base64,' + responseData.audio);\r\n        audio.play();\r\n      } else {\r\n        console.error('Failed to fetch data from the server.');\r\n      }\r\n    } catch (error) {\r\n      console.error('An error occurred:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <select id=\"voices\" value={selectedVoice} onChange={(e) => setSelectedVoice(e.target.value)}>\r\n          {/* Replace with options from your data source */}\r\n        </select>\r\n        <select id=\"languages\" value={selectedLanguage} onChange={(e) => setSelectedLanguage(e.target.value)}>\r\n          {/* Replace with options from your data source */}\r\n        </select>\r\n      </div>\r\n      <div id=\"chat\">\r\n        {chatMessages.map((message, index) => (\r\n          <div key={index} className={message.type}>\r\n            {message.type === 'user' ? 'You' : 'Bot'}: {message.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <input\r\n        type=\"text\"\r\n        value={userInput}\r\n        onChange={(e) => setUserInput(e.target.value)}\r\n        id=\"user_input\"\r\n      />\r\n      <button onClick={sendMessage}>Send</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}