[{"/Users/kjyoo/Downloads/FOODIL/influencer/influencer/influencer/frontend/src/index.js":"1","/Users/kjyoo/Downloads/FOODIL/influencer/influencer/influencer/frontend/src/App.js":"2","/Users/kjyoo/Downloads/FOODIL/influencer/influencer/influencer/frontend/src/components/ChatComponent.js":"3"},{"size":182,"mtime":1699281014000,"results":"4","hashOfConfig":"5"},{"size":214,"mtime":1699281014000,"results":"6","hashOfConfig":"5"},{"size":8051,"mtime":1699512598292,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"119b900",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},"/Users/kjyoo/Downloads/FOODIL/influencer/influencer/influencer/frontend/src/index.js",[],[],"/Users/kjyoo/Downloads/FOODIL/influencer/influencer/influencer/frontend/src/App.js",[],[],"/Users/kjyoo/Downloads/FOODIL/influencer/influencer/influencer/frontend/src/components/ChatComponent.js",["18","19"],[],"import React, { useState, useEffect, useRef } from 'react';\nimport './ChatComponent.css'; // Assume you have a CSS file for styles\nimport { io } from 'socket.io-client';\n\nconst ChatComponent = () => {\n  const [userInput, setUserInput] = useState('');\n  const [disableSend, setDisableSend] = useState(false);\n  const [selectedVoice, setSelectedVoice] = useState('');\n  const [selectedLanguage, setSelectedLanguage] = useState('');\n  const [chatMessages, setChatMessages] = useState([]);\n  const [voices, setVoices] = useState([]);\n  const [languages, setLanguages] = useState([]);\n  const [msgId, setMsgId] = useState(0);\n  const audioPlayerRef = useRef(null);\n  const voiceRef = useRef(null);\n  const [userName, setUserName] = useState('User');\n  const [audioQueue, setAudiQueue] = useState([])\n  audioPlayerRef.current = new Audio()\n\n  const ref = useRef(null);\n  ref.current = msgId;\n\n  useEffect(() => {\n    setAudiQueue([])\n    fetchData();\n    \n    const socket = io('http://127.0.0.1:5001', {\n      path: '/chat-ws',\n      transports: ['websocket'],\n      autoConnect: true,\n    });\n    socket.on('connect', () => {\n      console.log('connected');\n    });\n    socket.on('error', error => {\n      console.log('error', error);\n    });\n    socket.on(`${userName}`, handleIncomingMessage);\n\n    return () => {\n      socket.off(`${userName}`, handleIncomingMessage);\n      socket.disconnect();\n    };\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      console.log('Fetching config data from server...');\n      const response = await fetch('http://127.0.0.1:5001/config');\n      if (response.ok) {\n        const data = await response.json();\n        const voiceEntries = Object.entries(data.voices).map(([label, value]) => ({ label, value }));\n        const languageEntries = Object.entries(data.languages).map(([label, value]) => ({ label, value }));\n\n        setVoices(voiceEntries);\n        setLanguages(languageEntries);\n\n        // Set default selected values\n        if (voiceEntries.length > 0) {\n          setSelectedVoice(voiceEntries[0].value);\n          voiceRef.current = voiceEntries[0].value;\n        }\n        if (languageEntries.length > 0) {\n          setSelectedLanguage(languageEntries[0].value);\n        }\n      } else {\n        console.error('Failed to fetch data from the server:', response.statusText);\n      }\n    } catch (error) {\n      console.error('An error occurred while fetching data:', error);\n    }\n  };\n  \n  const handleIncomingAudio = async (data) => {\n      if (data) {\n        setAudiQueue((prevAudioQueue) => {\n          // Create a new copy of the array with the updated data\n          const updatedItems = [...prevAudioQueue, data];\n          return updatedItems;\n        });\n      }\n  }\n\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  useEffect(() => {\n    // Play the next audio when the audioQueue is not empty and there's no audio currently playing.\n    if (!isPlaying && audioQueue.length > 0) {\n      const nextAudio = audioQueue[0];\n      playAudio(nextAudio);\n      // Remove the played audio from the queue.\n      setAudiQueue((prevQueue) => prevQueue.slice(1));\n    }\n  }, [audioQueue, isPlaying]);\n\n  const playAudio = (base64Data) => {\n    setIsPlaying(true);\n\n    const audio = new Audio('data:audio/mpeg;base64,' + base64Data);\n    audio.onended = () => {\n      setIsPlaying(false);\n    };\n\n    audioPlayerRef.current = audio;\n    audioPlayerRef.current.play();\n  };\n\n  useEffect(() => {\n    console.log('Voices:', voices);\n    console.log('Languages:', languages);\n  }, [voices, languages]);\n\n  const sendMessage = async () => {\n    if (!userInput.trim()) {\n      console.log('No input to send');\n      return;\n    }\n    setDisableSend(true);\n    setMsgId(prev => prev + 1);\n\n    try {\n      // Combine user input with language code if necessary\n      // For example, 'en:Hello' if English is selected.\n      const combinedInput = `${selectedLanguage}:${userInput}`;\n      setChatMessages(previousMessages =>\n        previousMessages.concat({ type: 'user', name: userName, text: userInput })\n      );\n      setUserInput('');\n      const shouldStream = true;\n      // Prepare the request body by including the combined input\n      const requestBody = {\n        user_input: combinedInput,\n        selected_voice: selectedVoice,\n        selected_language: selectedLanguage, // You might not need to send this separately now\n        userName: userName, // we send this for socket connection\n        stream: shouldStream,\n      };\n      \n      const response = await fetch('http://127.0.0.1:5001/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody),\n      });\n      setDisableSend(false);\n      \n      if (response.ok) {\n        const responseData = await response.json();\n        console.log('stream finished.');\n        if (!shouldStream) {\n          setChatMessages(prevMessages => [\n            ...prevMessages,\n            { type: 'user', name: userName, text: userInput },\n            { type: 'bot', text: responseData.text },\n          ]);\n        }\n      } else {\n        console.error('Failed to send message to the server:', response.statusText);\n      }\n    } catch (error) {\n      setDisableSend(false);\n      console.error('An error occurred:', error);\n    }\n  \n    // Clear the user input after sending the message\n    setUserInput('');\n  };\n\n  const handleIncomingMessage = (data) => {\n    if (data.audio) {\n      console.log('handleIncomingAudio::');\n      handleIncomingAudio(data.audio);\n      return\n    }\n    console.log('handleIncomingMessage::' + JSON.stringify(data));\n\n    setChatMessages((prevMessages) => {\n      let currentMessageIndex = prevMessages.findIndex((m) => m._id === ref.current.toString());\n\n      if (currentMessageIndex !== -1) {\n        // Update the existing bot message\n        prevMessages[currentMessageIndex].text += data.content;\n        return [...prevMessages]; // Return a new array to trigger a re-render\n      } else {\n        if (data.content === '') {\n          return [...prevMessages];\n        }\n        // Create a new bot message\n        let botRes = {\n          _id: ref.current.toString(),\n          text: data.content,\n          type: 'bot',\n        };\n        return [...prevMessages, botRes]; // Add the new message to the array\n      }\n    });\n  };\n\n  const handleLanguageChange = (e) => {\n    console.log('Language selected:', e.target.value);\n    setSelectedLanguage(e.target.value);\n  };\n\n  useEffect(() => {\n    console.log('Selected language state updated to:', selectedLanguage);\n  }, [selectedLanguage]);\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-config\">\n        <select id=\"voices\" value={selectedVoice} onChange={(e) => setSelectedVoice(e.target.value)}>\n          {voices.map((voice, index) => (\n            <option key={index} value={voice.value}>\n              {voice.label}\n            </option>\n          ))}\n        </select>\n        <select id=\"languages\" value={selectedLanguage} onChange={handleLanguageChange}>\n  {languages.map((language, index) => (\n    <option key={index} value={language.value}>\n      {language.label}\n    </option>\n  ))}\n</select>\n      </div>\n      <div className=\"chat-messages\">\n  {chatMessages.map((msg, index) => (\n    <div key={index} className={`message ${msg.type}`}>\n      <span className=\"message-name\">{msg.type === 'user' ? userName : 'Bot'}</span>\n      <span className=\"message-text\">{msg.text}</span>\n    </div>\n  ))}\n</div>\n      <div className=\"chat-input\">\n      <textarea\n  value={userInput}\n  onChange={(e) => setUserInput(e.target.value)}\n  onKeyDown={(e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      if (!disableSend) {\n        sendMessage();\n      }\n    }\n  }}\n  disabled={disableSend}\n  placeholder=\"Type your message here...\"\n/>\n<button onClick={sendMessage} disabled={!userInput.trim() || disableSend}>\n  Send\n</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatComponent;",{"ruleId":"20","severity":1,"message":"21","line":16,"column":20,"nodeType":"22","messageId":"23","endLine":16,"endColumn":31},{"ruleId":"24","severity":1,"message":"25","line":44,"column":6,"nodeType":"26","endLine":44,"endColumn":8,"suggestions":"27"},"no-unused-vars","'setUserName' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'handleIncomingMessage' and 'userName'. Either include them or remove the dependency array.","ArrayExpression",["28"],{"desc":"29","fix":"30"},"Update the dependencies array to be: [handleIncomingMessage, userName]",{"range":"31","text":"32"},[1407,1409],"[handleIncomingMessage, userName]"]