{"ast":null,"code":"var _jsxFileName = \"/Users/kjyoo/Downloads/FOODIL/influencer/influencer/influencer/frontend/src/components/ChatComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ChatComponent.css'; // Assume you have a CSS file for styles\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatComponent = () => {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [disableSend, setDisableSend] = useState(false);\n  const [selectedVoice, setSelectedVoice] = useState('');\n  const [selectedLanguage, setSelectedLanguage] = useState('');\n  const [chatMessages, setChatMessages] = useState([]);\n  const [voices, setVoices] = useState([]);\n  const [languages, setLanguages] = useState([]);\n  const [msgId, setMsgId] = useState(0);\n  const audioPlayerRef = useRef(null);\n  const voiceRef = useRef(null);\n  const [userName, setUserName] = useState('User');\n  const [audioQueue, setAudiQueue] = useState([]);\n  audioPlayerRef.current = new Audio();\n  const ref = useRef(null);\n  ref.current = msgId;\n  useEffect(() => {\n    setAudiQueue([]);\n    fetchData();\n    const socket = io('http://127.0.0.1:5001', {\n      path: '/chat-ws',\n      transports: ['websocket'],\n      autoConnect: true\n    });\n    socket.on('connect', () => {\n      console.log('connected');\n    });\n    socket.on('error', error => {\n      console.log('error', error);\n    });\n    socket.on(`${userName}`, handleIncomingMessage);\n    return () => {\n      socket.off(`${userName}`, handleIncomingMessage);\n      socket.disconnect();\n    };\n  }, []);\n  const fetchData = async () => {\n    try {\n      console.log('Fetching config data from server...');\n      const response = await fetch('http://127.0.0.1:5001/config');\n      if (response.ok) {\n        const data = await response.json();\n        const voiceEntries = Object.entries(data.voices).map(([label, value]) => ({\n          label,\n          value\n        }));\n        const languageEntries = Object.entries(data.languages).map(([label, value]) => ({\n          label,\n          value\n        }));\n        setVoices(voiceEntries);\n        setLanguages(languageEntries);\n\n        // Set default selected values\n        if (voiceEntries.length > 0) {\n          setSelectedVoice(voiceEntries[0].value);\n          voiceRef.current = voiceEntries[0].value;\n        }\n        if (languageEntries.length > 0) {\n          setSelectedLanguage(languageEntries[0].value);\n        }\n      } else {\n        console.error('Failed to fetch data from the server:', response.statusText);\n      }\n    } catch (error) {\n      console.error('An error occurred while fetching data:', error);\n    }\n  };\n  const handleIncomingAudio = async data => {\n    if (data) {\n      setAudiQueue(prevAudioQueue => {\n        // Create a new copy of the array with the updated data\n        const updatedItems = [...prevAudioQueue, data];\n        return updatedItems;\n      });\n    }\n  };\n  const [isPlaying, setIsPlaying] = useState(false);\n  useEffect(() => {\n    if (!isPlaying && audioQueue.length > 0) {\n      const nextAudio = audioQueue[0];\n      playAudio(nextAudio.audioData); // Only play audio, do not set text here\n      setAudiQueue(prevQueue => prevQueue.slice(1)); // Remove the played audio from the queue\n    }\n  }, [audioQueue, isPlaying]);\n  const playAudio = base64Data => {\n    setIsPlaying(true);\n\n    // Play the audio\n    const audio = new Audio('data:audio/mpeg;base64,' + base64Data);\n    audio.onended = () => setIsPlaying(false);\n    audioPlayerRef.current = audio;\n    audioPlayerRef.current.play();\n  };\n  const chatContainerRef = useRef(null);\n  useEffect(() => {\n    // Scroll to the bottom of the chat container whenever chatMessages change\n    chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n  }, [chatMessages]);\n  useEffect(() => {\n    console.log('Voices:', voices);\n    console.log('Languages:', languages);\n  }, [voices, languages]);\n  const sendMessage = async () => {\n    if (!userInput.trim() && !selectedFile) {\n      console.log('No input or file to send');\n      return;\n    }\n    setDisableSend(true);\n    try {\n      let base64Image;\n      if (selectedFile) {\n        // Convert the selected file to a base64 encoded string\n        base64Image = await new Promise((resolve, reject) => {\n          const reader = new FileReader();\n          reader.onload = () => resolve(reader.result);\n          reader.onerror = error => reject(error);\n          reader.readAsDataURL(selectedFile);\n        });\n      }\n\n      // Create the request body\n      const requestBody = {\n        text: userInput,\n        selected_voice: selectedVoice,\n        userName: userName,\n        image: base64Image || null // Include the base64 image if available\n      };\n\n      const response = await fetch('http://127.0.0.1:5001/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n      setDisableSend(false);\n      if (response.ok) {\n        const responseData = await response.json();\n        console.log('Response data from POST /chat:', responseData);\n        console.log('stream finished.');\n        if (!shouldStream) {\n          setChatMessages(prevMessages => [{\n            type: 'user',\n            name: userName,\n            text: userInput\n          }, {\n            type: 'bot',\n            text: responseData.text\n          }]);\n        }\n      } else {\n        console.error('Failed to send message to the server:', response.statusText);\n      }\n    } catch (error) {\n      console.error('An error occurred:', error);\n    } finally {\n      setUserInput('');\n      setSelectedFile(null);\n      setDisableSend(false);\n    }\n  };\n  const handleIncomingMessage = data => {\n    console.log('Incoming message data:', data);\n    // If there's audio data, add it to the audioQueue state\n    if (data.audio) {\n      setAudiQueue(prevAudioQueue => [...prevAudioQueue, {\n        audioData: data.audio\n      }]);\n    }\n    console.log('handleIncomingMessage::' + JSON.stringify(data));\n    setChatMessages(prevMessages => {\n      console.log('Previous messages:', prevMessages);\n      // Find if the incoming message is a continuation of the last bot message\n      const lastMessage = prevMessages[prevMessages.length - 1];\n      let updatedMessages = prevMessages.slice(); // Create a copy of the previous messages\n\n      if (lastMessage && lastMessage.type === 'bot' && lastMessage._id === data._id) {\n        // Update the last bot message text\n        lastMessage.text += data.text;\n        console.log(chatMessages);\n        // Update the copy of the messages with the modified last message\n        updatedMessages[prevMessages.length - 1] = lastMessage;\n      } else {\n        // Add a new bot message\n        console.log('Updated messages:', prevMessages);\n        // Add the new message to the copy of messages\n        updatedMessages.push(data);\n      }\n      return updatedMessages; // Return the copy of the messages with the applied changes\n    });\n  };\n\n  const handleLanguageChange = e => {\n    console.log('Language selected:', e.target.value);\n    setSelectedLanguage(e.target.value);\n  };\n  useEffect(() => {\n    console.log('Selected language state updated to:', selectedLanguage);\n  }, [selectedLanguage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-config\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"voices\",\n        value: selectedVoice,\n        onChange: e => setSelectedVoice(e.target.value),\n        children: voices.map((voice, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: voice.value,\n          children: voice.label\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"languages\",\n        value: selectedLanguage,\n        onChange: handleLanguageChange,\n        children: languages.map((language, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: language.value,\n          children: language.label\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 5\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      ref: chatContainerRef,\n      children: chatMessages.map((msg, index) => msg.text && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.type}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-name\",\n          children: msg.type === 'user' ? userName : 'Bot'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-text\",\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        onKeyDown: e => {\n          if (e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault();\n            if (!disableSend) {\n              sendMessage();\n            }\n          }\n        },\n        disabled: disableSend,\n        placeholder: \"Type your message here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        disabled: !userInput.trim() || disableSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatComponent, \"FmMg0oUmz/xi3TArAXlek8H6xvk=\");\n_c = ChatComponent;\nexport default ChatComponent;\nvar _c;\n$RefreshReg$(_c, \"ChatComponent\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","jsxDEV","_jsxDEV","ChatComponent","_s","userInput","setUserInput","disableSend","setDisableSend","selectedVoice","setSelectedVoice","selectedLanguage","setSelectedLanguage","chatMessages","setChatMessages","voices","setVoices","languages","setLanguages","msgId","setMsgId","audioPlayerRef","voiceRef","userName","setUserName","audioQueue","setAudiQueue","current","Audio","ref","fetchData","socket","path","transports","autoConnect","on","console","log","error","handleIncomingMessage","off","disconnect","response","fetch","ok","data","json","voiceEntries","Object","entries","map","label","value","languageEntries","length","statusText","handleIncomingAudio","prevAudioQueue","updatedItems","isPlaying","setIsPlaying","nextAudio","playAudio","audioData","prevQueue","slice","base64Data","audio","onended","play","chatContainerRef","scrollTop","scrollHeight","sendMessage","trim","selectedFile","base64Image","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsDataURL","requestBody","text","selected_voice","image","method","headers","body","JSON","stringify","responseData","shouldStream","prevMessages","type","name","setSelectedFile","lastMessage","updatedMessages","_id","push","handleLanguageChange","e","target","className","children","id","onChange","voice","index","fileName","_jsxFileName","lineNumber","columnNumber","language","msg","onKeyDown","key","shiftKey","preventDefault","disabled","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/kjyoo/Downloads/FOODIL/influencer/influencer/influencer/frontend/src/components/ChatComponent.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './ChatComponent.css'; // Assume you have a CSS file for styles\nimport { io } from 'socket.io-client';\n\nconst ChatComponent = () => {\n  const [userInput, setUserInput] = useState('');\n  const [disableSend, setDisableSend] = useState(false);\n  const [selectedVoice, setSelectedVoice] = useState('');\n  const [selectedLanguage, setSelectedLanguage] = useState('');\n  const [chatMessages, setChatMessages] = useState([]);\n  const [voices, setVoices] = useState([]);\n  const [languages, setLanguages] = useState([]);\n  const [msgId, setMsgId] = useState(0);\n  const audioPlayerRef = useRef(null);\n  const voiceRef = useRef(null);\n  const [userName, setUserName] = useState('User');\n  const [audioQueue, setAudiQueue] = useState([])\n  audioPlayerRef.current = new Audio()\n\n  const ref = useRef(null);\n  ref.current = msgId;\n\n  useEffect(() => {\n    setAudiQueue([])\n    fetchData();\n\n    const socket = io('http://127.0.0.1:5001', {\n      path: '/chat-ws',\n      transports: ['websocket'],\n      autoConnect: true,\n    });\n    socket.on('connect', () => {\n      console.log('connected');\n    });\n    socket.on('error', error => {\n      console.log('error', error);\n    });\n    socket.on(`${userName}`, handleIncomingMessage);\n\n    return () => {\n      socket.off(`${userName}`, handleIncomingMessage);\n      socket.disconnect();\n    };\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      console.log('Fetching config data from server...');\n      const response = await fetch('http://127.0.0.1:5001/config');\n      if (response.ok) {\n        const data = await response.json();\n        const voiceEntries = Object.entries(data.voices).map(([label, value]) => ({ label, value }));\n        const languageEntries = Object.entries(data.languages).map(([label, value]) => ({ label, value }));\n\n        setVoices(voiceEntries);\n        setLanguages(languageEntries);\n\n        // Set default selected values\n        if (voiceEntries.length > 0) {\n          setSelectedVoice(voiceEntries[0].value);\n          voiceRef.current = voiceEntries[0].value;\n        }\n        if (languageEntries.length > 0) {\n          setSelectedLanguage(languageEntries[0].value);\n        }\n      } else {\n        console.error('Failed to fetch data from the server:', response.statusText);\n      }\n    } catch (error) {\n      console.error('An error occurred while fetching data:', error);\n    }\n  };\n\n  const handleIncomingAudio = async (data) => {\n      if (data) {\n        setAudiQueue((prevAudioQueue) => {\n          // Create a new copy of the array with the updated data\n          const updatedItems = [...prevAudioQueue, data];\n          return updatedItems;\n        });\n      }\n  }\n\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  useEffect(() => {\n    if (!isPlaying && audioQueue.length > 0) {\n      const nextAudio = audioQueue[0];\n      playAudio(nextAudio.audioData); // Only play audio, do not set text here\n      setAudiQueue(prevQueue => prevQueue.slice(1)); // Remove the played audio from the queue\n    }\n  }, [audioQueue, isPlaying]);\n\n  const playAudio = (base64Data) => {\n    setIsPlaying(true);\n\n    // Play the audio\n    const audio = new Audio('data:audio/mpeg;base64,' + base64Data);\n    audio.onended = () => setIsPlaying(false);\n    audioPlayerRef.current = audio;\n    audioPlayerRef.current.play();\n  };\n\n\n  const chatContainerRef = useRef(null);\n\n  useEffect(() => {\n    // Scroll to the bottom of the chat container whenever chatMessages change\n    chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n  }, [chatMessages]);\n\n\n  useEffect(() => {\n    console.log('Voices:', voices);\n    console.log('Languages:', languages);\n  }, [voices, languages]);\n\n  const sendMessage = async () => {\n    if (!userInput.trim() && !selectedFile) {\n      console.log('No input or file to send');\n      return;\n    }\n    setDisableSend(true);\n    \n    try {\n      let base64Image;\n      if (selectedFile) {\n        // Convert the selected file to a base64 encoded string\n        base64Image = await new Promise((resolve, reject) => {\n          const reader = new FileReader();\n          reader.onload = () => resolve(reader.result);\n          reader.onerror = error => reject(error);\n          reader.readAsDataURL(selectedFile);\n        });\n      }\n  \n      // Create the request body\n      const requestBody = {\n        text: userInput,\n        selected_voice: selectedVoice,\n        userName: userName,\n        image: base64Image || null, // Include the base64 image if available\n      };\n  \n      const response = await fetch('http://127.0.0.1:5001/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody),\n      });\n      setDisableSend(false);\n\n      if (response.ok) {\n        const responseData = await response.json();\n        console.log('Response data from POST /chat:', responseData);\n        console.log('stream finished.');\n        if (!shouldStream) {\n          setChatMessages(prevMessages => [\n            { type: 'user', name: userName, text: userInput },\n            { type: 'bot', text: responseData.text },\n          ]);\n        }\n      } else {\n        console.error('Failed to send message to the server:', response.statusText);\n      }\n    } catch (error) {\n      console.error('An error occurred:', error);\n    } finally {\n      setUserInput('');\n      setSelectedFile(null);\n      setDisableSend(false);\n    }\n  };\n\n  const handleIncomingMessage = (data) => {\n    console.log('Incoming message data:', data);\n    // If there's audio data, add it to the audioQueue state\n    if (data.audio) {\n      setAudiQueue(prevAudioQueue => [...prevAudioQueue, { audioData: data.audio }]);\n    }\n\n    console.log('handleIncomingMessage::' + JSON.stringify(data));\n\n    setChatMessages((prevMessages) => {\n      console.log('Previous messages:', prevMessages);\n      // Find if the incoming message is a continuation of the last bot message\n      const lastMessage = prevMessages[prevMessages.length - 1];\n      let updatedMessages = prevMessages.slice(); // Create a copy of the previous messages\n\n      if (lastMessage && lastMessage.type === 'bot' && lastMessage._id === data._id) {\n          // Update the last bot message text\n          lastMessage.text += data.text;\n          console.log(chatMessages);\n          // Update the copy of the messages with the modified last message\n          updatedMessages[prevMessages.length - 1] = lastMessage;\n      } else {\n          // Add a new bot message\n          console.log('Updated messages:', prevMessages);\n          // Add the new message to the copy of messages\n          updatedMessages.push(data);\n      }\n\n      return updatedMessages; // Return the copy of the messages with the applied changes\n  });\n};\n\n\n  const handleLanguageChange = (e) => {\n    console.log('Language selected:', e.target.value);\n    setSelectedLanguage(e.target.value);\n  };\n\n  useEffect(() => {\n    console.log('Selected language state updated to:', selectedLanguage);\n  }, [selectedLanguage]);\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-config\">\n        <select id=\"voices\" value={selectedVoice} onChange={(e) => setSelectedVoice(e.target.value)}>\n          {voices.map((voice, index) => (\n            <option key={index} value={voice.value}>\n              {voice.label}\n            </option>\n          ))}\n        </select>\n        <select id=\"languages\" value={selectedLanguage} onChange={handleLanguageChange}>\n  {languages.map((language, index) => (\n    <option key={index} value={language.value}>\n      {language.label}\n    </option>\n  ))}\n</select>\n      </div>\n      <div className=\"chat-messages\" ref={chatContainerRef}>\n        {chatMessages.map((msg, index) => (\n          msg.text && (\n            <div key={index} className={`message ${msg.type}`}>\n              <span className=\"message-name\">{msg.type === 'user' ? userName : 'Bot'}</span>\n              <span className=\"message-text\">{msg.text}</span>\n            </div>\n          )\n        ))}\n      </div>\n      <div className=\"chat-input\">\n      <textarea\n  value={userInput}\n  onChange={(e) => setUserInput(e.target.value)}\n  onKeyDown={(e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      if (!disableSend) {\n        sendMessage();\n      }\n    }\n  }}\n  disabled={disableSend}\n  placeholder=\"Type your message here...\"\n/>\n<button onClick={sendMessage} disabled={!userInput.trim() || disableSend}>\n  Send\n</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatComponent;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}