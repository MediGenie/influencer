{"ast":null,"code":"var _jsxFileName = \"/Users/kjyoo/Downloads/FOODIL/influencer/influencer/influencer/frontend/src/components/ChatComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ChatComponent.css'; // Assume you have a CSS file for styles\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatComponent = () => {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [disableSend, setDisableSend] = useState(false);\n  const [selectedVoice, setSelectedVoice] = useState('');\n  const [selectedLanguage, setSelectedLanguage] = useState('');\n  const [chatMessages, setChatMessages] = useState([]);\n  const [voices, setVoices] = useState([]);\n  const [languages, setLanguages] = useState([]);\n  const [msgId, setMsgId] = useState(0);\n  const audioPlayerRef = useRef(null);\n  const voiceRef = useRef(null);\n  const [userName, setUserName] = useState('User');\n  const [audioQueue, setAudiQueue] = useState([]);\n  audioPlayerRef.current = new Audio();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const ref = useRef(null);\n  ref.current = msgId;\n  useEffect(() => {\n    setAudiQueue([]);\n    fetchData();\n    const socket = io('http://127.0.0.1:5001', {\n      path: '/chat-ws',\n      transports: ['websocket'],\n      autoConnect: true\n    });\n    socket.on('connect', () => {\n      console.log('connected');\n    });\n    socket.on('error', error => {\n      console.log('error', error);\n    });\n    socket.on(`${userName}`, handleIncomingMessage);\n    return () => {\n      socket.off(`${userName}`, handleIncomingMessage);\n      socket.disconnect();\n    };\n  }, []);\n  const handleFileChange = event => {\n    if (event.target.files && event.target.files[0]) {\n      setSelectedFile(event.target.files[0]);\n    } else {\n      setSelectedFile(null);\n    }\n  };\n  const fetchData = async () => {\n    try {\n      console.log('Fetching config data from server...');\n      const response = await fetch('http://127.0.0.1:5001/config');\n      if (response.ok) {\n        const data = await response.json();\n        const voiceEntries = Object.entries(data.voices).map(([label, value]) => ({\n          label,\n          value\n        }));\n        const languageEntries = Object.entries(data.languages).map(([label, value]) => ({\n          label,\n          value\n        }));\n        setVoices(voiceEntries);\n        setLanguages(languageEntries);\n\n        // Set default selected values\n        if (voiceEntries.length > 0) {\n          setSelectedVoice(voiceEntries[0].value);\n          voiceRef.current = voiceEntries[0].value;\n        }\n        if (languageEntries.length > 0) {\n          setSelectedLanguage(languageEntries[0].value);\n        }\n      } else {\n        console.error('Failed to fetch data from the server:', response.statusText);\n      }\n    } catch (error) {\n      console.error('An error occurred while fetching data:', error);\n    }\n  };\n  const handleIncomingAudio = async data => {\n    if (data) {\n      setAudiQueue(prevAudioQueue => {\n        // Create a new copy of the array with the updated data\n        const updatedItems = [...prevAudioQueue, data];\n        return updatedItems;\n      });\n    }\n  };\n  const [isPlaying, setIsPlaying] = useState(false);\n  useEffect(() => {\n    if (!isPlaying && audioQueue.length > 0) {\n      const nextAudio = audioQueue[0];\n      playAudio(nextAudio.audioData); // Only play audio, do not set text here\n      setAudiQueue(prevQueue => prevQueue.slice(1)); // Remove the played audio from the queue\n    }\n  }, [audioQueue, isPlaying]);\n  const playAudio = base64Data => {\n    setIsPlaying(true);\n\n    // Play the audio\n    const audio = new Audio('data:audio/mpeg;base64,' + base64Data);\n    audio.onended = () => setIsPlaying(false);\n    audioPlayerRef.current = audio;\n    audioPlayerRef.current.play();\n  };\n  const chatContainerRef = useRef(null);\n  useEffect(() => {\n    // Scroll to the bottom of the chat container whenever chatMessages change\n    chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n  }, [chatMessages]);\n  useEffect(() => {\n    console.log('Voices:', voices);\n    console.log('Languages:', languages);\n  }, [voices, languages]);\n  const sendMessage = async () => {\n    if (!userInput.trim() && !selectedFile) {\n      console.log('No input or file to send');\n      return;\n    }\n    setDisableSend(true);\n    try {\n      let response;\n      if (selectedFile) {\n        // Handling file upload\n        const formData = new FormData();\n        formData.append('image', selectedFile);\n        if (userInput.trim()) {\n          formData.append('text', userInput);\n        }\n        response = await fetch('http://127.0.0.1:5001/upload', {\n          method: 'POST',\n          body: formData\n        });\n        const data = await response.json(); // Assuming the server sends back JSON\n        if (data && data.imageUrl) {\n          setChatMessages(prevMessages => [...prevMessages, {\n            type: 'user',\n            text: `Uploaded: ${data.imageUrl}`\n          }]);\n        }\n      } else {\n        // Handling text message\n        const combinedInput = `${selectedLanguage}:${userInput}`;\n        const requestBody = {\n          user_input: combinedInput,\n          selected_voice: selectedVoice,\n          userName: userName\n        };\n        response = await fetch('http://127.0.0.1:5001/chat', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(requestBody)\n        });\n        const responseData = await response.json();\n        setChatMessages(prevMessages => [...prevMessages, {\n          type: 'user',\n          text: userInput\n        }, {\n          type: 'bot',\n          text: responseData.text\n        }]);\n      }\n    } catch (error) {\n      console.error('An error occurred:', error);\n    } finally {\n      setUserInput('');\n      setSelectedFile(null);\n      setDisableSend(false);\n    }\n  };\n  const handleIncomingMessage = data => {\n    console.log('Incoming message data:', data);\n    // If there's audio data, add it to the audioQueue state\n    if (data.audio) {\n      setAudiQueue(prevAudioQueue => [...prevAudioQueue, {\n        audioData: data.audio\n      }]);\n    }\n    console.log('handleIncomingMessage::' + JSON.stringify(data));\n    setChatMessages(prevMessages => {\n      console.log('Previous messages:', prevMessages);\n      // Find if the incoming message is a continuation of the last bot message\n      const lastMessage = prevMessages[prevMessages.length - 1];\n      let updatedMessages = prevMessages.slice(); // Create a copy of the previous messages\n\n      if (lastMessage && lastMessage.type === 'bot' && lastMessage._id === data._id) {\n        // Update the last bot message text\n        lastMessage.text += data.text;\n        console.log(chatMessages);\n        // Update the copy of the messages with the modified last message\n        updatedMessages[prevMessages.length - 1] = lastMessage;\n      } else {\n        // Add a new bot message\n        console.log('Updated messages:', prevMessages);\n        // Add the new message to the copy of messages\n        updatedMessages.push(data);\n      }\n      return updatedMessages; // Return the copy of the messages with the applied changes\n    });\n  };\n\n  const handleLanguageChange = e => {\n    console.log('Language selected:', e.target.value);\n    setSelectedLanguage(e.target.value);\n  };\n  useEffect(() => {\n    console.log('Selected language state updated to:', selectedLanguage);\n  }, [selectedLanguage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-config\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"voices\",\n        value: selectedVoice,\n        onChange: e => setSelectedVoice(e.target.value),\n        children: voices.map((voice, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: voice.value,\n          children: voice.label\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"languages\",\n        value: selectedLanguage,\n        onChange: handleLanguageChange,\n        children: languages.map((language, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: language.value,\n          children: language.label\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 5\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      ref: chatContainerRef,\n      children: chatMessages.map((msg, index) => msg.text && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.type}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-name\",\n          children: msg.type === 'user' ? userName : 'Bot'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-text\",\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [selectedFile ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: selectedFile.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setSelectedFile(null),\n          children: \"Remove\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 5\n      }, this) : /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        onKeyDown: e => {\n          if (e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault();\n            if (!disableSend) {\n              sendMessage();\n            }\n          }\n        },\n        disabled: disableSend,\n        placeholder: \"Type your message here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: handleFileChange,\n        style: {\n          display: selectedFile ? 'none' : 'block'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        disabled: !userInput.trim() && !selectedFile || disableSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatComponent, \"tRzcxFep7Cv7MrmSnMrQNz20C5U=\");\n_c = ChatComponent;\nexport default ChatComponent;\nvar _c;\n$RefreshReg$(_c, \"ChatComponent\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","jsxDEV","_jsxDEV","ChatComponent","_s","userInput","setUserInput","disableSend","setDisableSend","selectedVoice","setSelectedVoice","selectedLanguage","setSelectedLanguage","chatMessages","setChatMessages","voices","setVoices","languages","setLanguages","msgId","setMsgId","audioPlayerRef","voiceRef","userName","setUserName","audioQueue","setAudiQueue","current","Audio","selectedFile","setSelectedFile","ref","fetchData","socket","path","transports","autoConnect","on","console","log","error","handleIncomingMessage","off","disconnect","handleFileChange","event","target","files","response","fetch","ok","data","json","voiceEntries","Object","entries","map","label","value","languageEntries","length","statusText","handleIncomingAudio","prevAudioQueue","updatedItems","isPlaying","setIsPlaying","nextAudio","playAudio","audioData","prevQueue","slice","base64Data","audio","onended","play","chatContainerRef","scrollTop","scrollHeight","sendMessage","trim","formData","FormData","append","method","body","imageUrl","prevMessages","type","text","combinedInput","requestBody","user_input","selected_voice","headers","JSON","stringify","responseData","lastMessage","updatedMessages","_id","push","handleLanguageChange","e","className","children","id","onChange","voice","index","fileName","_jsxFileName","lineNumber","columnNumber","language","msg","name","onClick","onKeyDown","key","shiftKey","preventDefault","disabled","placeholder","accept","style","display","_c","$RefreshReg$"],"sources":["/Users/kjyoo/Downloads/FOODIL/influencer/influencer/influencer/frontend/src/components/ChatComponent.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './ChatComponent.css'; // Assume you have a CSS file for styles\nimport { io } from 'socket.io-client';\n\nconst ChatComponent = () => {\n  const [userInput, setUserInput] = useState('');\n  const [disableSend, setDisableSend] = useState(false);\n  const [selectedVoice, setSelectedVoice] = useState('');\n  const [selectedLanguage, setSelectedLanguage] = useState('');\n  const [chatMessages, setChatMessages] = useState([]);\n  const [voices, setVoices] = useState([]);\n  const [languages, setLanguages] = useState([]);\n  const [msgId, setMsgId] = useState(0);\n  const audioPlayerRef = useRef(null);\n  const voiceRef = useRef(null);\n  const [userName, setUserName] = useState('User');\n  const [audioQueue, setAudiQueue] = useState([])\n  audioPlayerRef.current = new Audio()\n  const [selectedFile, setSelectedFile] = useState(null);\n\n  const ref = useRef(null);\n  ref.current = msgId;\n\n  useEffect(() => {\n    setAudiQueue([])\n    fetchData();\n\n    const socket = io('http://127.0.0.1:5001', {\n      path: '/chat-ws',\n      transports: ['websocket'],\n      autoConnect: true,\n    });\n    socket.on('connect', () => {\n      console.log('connected');\n    });\n    socket.on('error', error => {\n      console.log('error', error);\n    });\n    socket.on(`${userName}`, handleIncomingMessage);\n\n    return () => {\n      socket.off(`${userName}`, handleIncomingMessage);\n      socket.disconnect();\n    };\n  }, []);\n\n  const handleFileChange = (event) => {\n    if (event.target.files && event.target.files[0]) {\n      setSelectedFile(event.target.files[0]);\n    } else {\n      setSelectedFile(null);\n    }\n  };\n\n  const fetchData = async () => {\n    try {\n      console.log('Fetching config data from server...');\n      const response = await fetch('http://127.0.0.1:5001/config');\n      if (response.ok) {\n        const data = await response.json();\n        const voiceEntries = Object.entries(data.voices).map(([label, value]) => ({ label, value }));\n        const languageEntries = Object.entries(data.languages).map(([label, value]) => ({ label, value }));\n\n        setVoices(voiceEntries);\n        setLanguages(languageEntries);\n\n        // Set default selected values\n        if (voiceEntries.length > 0) {\n          setSelectedVoice(voiceEntries[0].value);\n          voiceRef.current = voiceEntries[0].value;\n        }\n        if (languageEntries.length > 0) {\n          setSelectedLanguage(languageEntries[0].value);\n        }\n      } else {\n        console.error('Failed to fetch data from the server:', response.statusText);\n      }\n    } catch (error) {\n      console.error('An error occurred while fetching data:', error);\n    }\n  };\n\n  const handleIncomingAudio = async (data) => {\n      if (data) {\n        setAudiQueue((prevAudioQueue) => {\n          // Create a new copy of the array with the updated data\n          const updatedItems = [...prevAudioQueue, data];\n          return updatedItems;\n        });\n      }\n  }\n\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  useEffect(() => {\n    if (!isPlaying && audioQueue.length > 0) {\n      const nextAudio = audioQueue[0];\n      playAudio(nextAudio.audioData); // Only play audio, do not set text here\n      setAudiQueue(prevQueue => prevQueue.slice(1)); // Remove the played audio from the queue\n    }\n  }, [audioQueue, isPlaying]);\n\n  const playAudio = (base64Data) => {\n    setIsPlaying(true);\n\n    // Play the audio\n    const audio = new Audio('data:audio/mpeg;base64,' + base64Data);\n    audio.onended = () => setIsPlaying(false);\n    audioPlayerRef.current = audio;\n    audioPlayerRef.current.play();\n  };\n\n\n  const chatContainerRef = useRef(null);\n\n  useEffect(() => {\n    // Scroll to the bottom of the chat container whenever chatMessages change\n    chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n  }, [chatMessages]);\n\n\n  useEffect(() => {\n    console.log('Voices:', voices);\n    console.log('Languages:', languages);\n  }, [voices, languages]);\n\n\n  const sendMessage = async () => {\n    if (!userInput.trim() && !selectedFile) {\n      console.log('No input or file to send');\n      return;\n    }\n  \n    setDisableSend(true);\n    \n    try {\n      let response;\n  \n      if (selectedFile) {\n        // Handling file upload\n        const formData = new FormData();\n        formData.append('image', selectedFile);\n    \n        if (userInput.trim()) {\n          formData.append('text', userInput);\n        }\n  \n        response = await fetch('http://127.0.0.1:5001/upload', {\n          method: 'POST',\n          body: formData,\n        });\n  \n        const data = await response.json(); // Assuming the server sends back JSON\n        if (data && data.imageUrl) {\n          setChatMessages(prevMessages => [...prevMessages, { type: 'user', text: `Uploaded: ${data.imageUrl}` }]);\n        }\n      } else {\n        // Handling text message\n        const combinedInput = `${selectedLanguage}:${userInput}`;\n        const requestBody = {\n          user_input: combinedInput,\n          selected_voice: selectedVoice,\n          userName: userName,\n        };\n  \n        response = await fetch('http://127.0.0.1:5001/chat', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(requestBody),\n        });\n  \n        const responseData = await response.json();\n        setChatMessages(prevMessages => [...prevMessages, { type: 'user', text: userInput }, { type: 'bot', text: responseData.text }]);\n      }\n    } catch (error) {\n      console.error('An error occurred:', error);\n    } finally {\n      setUserInput('');\n      setSelectedFile(null);\n      setDisableSend(false);\n    }\n  };\n  \n  \n  const handleIncomingMessage = (data) => {\n    console.log('Incoming message data:', data);\n    // If there's audio data, add it to the audioQueue state\n    if (data.audio) {\n      setAudiQueue(prevAudioQueue => [...prevAudioQueue, { audioData: data.audio }]);\n    }\n\n    console.log('handleIncomingMessage::' + JSON.stringify(data));\n\n    setChatMessages((prevMessages) => {\n      console.log('Previous messages:', prevMessages);\n      // Find if the incoming message is a continuation of the last bot message\n      const lastMessage = prevMessages[prevMessages.length - 1];\n      let updatedMessages = prevMessages.slice(); // Create a copy of the previous messages\n\n      if (lastMessage && lastMessage.type === 'bot' && lastMessage._id === data._id) {\n          // Update the last bot message text\n          lastMessage.text += data.text;\n          console.log(chatMessages);\n          // Update the copy of the messages with the modified last message\n          updatedMessages[prevMessages.length - 1] = lastMessage;\n      } else {\n          // Add a new bot message\n          console.log('Updated messages:', prevMessages);\n          // Add the new message to the copy of messages\n          updatedMessages.push(data);\n      }\n\n      return updatedMessages; // Return the copy of the messages with the applied changes\n  });\n};\n\n\n  const handleLanguageChange = (e) => {\n    console.log('Language selected:', e.target.value);\n    setSelectedLanguage(e.target.value);\n  };\n\n  useEffect(() => {\n    console.log('Selected language state updated to:', selectedLanguage);\n  }, [selectedLanguage]);\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-config\">\n        <select id=\"voices\" value={selectedVoice} onChange={(e) => setSelectedVoice(e.target.value)}>\n          {voices.map((voice, index) => (\n            <option key={index} value={voice.value}>\n              {voice.label}\n            </option>\n          ))}\n        </select>\n        <select id=\"languages\" value={selectedLanguage} onChange={handleLanguageChange}>\n  {languages.map((language, index) => (\n    <option key={index} value={language.value}>\n      {language.label}\n    </option>\n  ))}\n</select>\n      </div>\n      <div className=\"chat-messages\" ref={chatContainerRef}>\n        {chatMessages.map((msg, index) => (\n          msg.text && (\n            <div key={index} className={`message ${msg.type}`}>\n              <span className=\"message-name\">{msg.type === 'user' ? userName : 'Bot'}</span>\n              <span className=\"message-text\">{msg.text}</span>\n            </div>\n          )\n        ))}\n      </div>\n      <div className=\"chat-input\">\n  {/* Conditionally render the input fields */}\n  {selectedFile ? (\n    <div>\n      <span>{selectedFile.name}</span>\n      <button onClick={() => setSelectedFile(null)}>Remove</button>\n    </div>\n  ) : (\n    <textarea\n      value={userInput}\n      onChange={(e) => setUserInput(e.target.value)}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter' && !e.shiftKey) {\n          e.preventDefault();\n          if (!disableSend) {\n            sendMessage();\n          }\n        }\n      }}\n      disabled={disableSend}\n      placeholder=\"Type your message here...\"\n    />\n  )}\n\n  {/* File input for images */}\n  <input\n    type=\"file\"\n    accept=\"image/*\"\n    onChange={handleFileChange}\n    style={{ display: selectedFile ? 'none' : 'block' }}\n  />\n\n  <button onClick={sendMessage} disabled={!userInput.trim() && !selectedFile || disableSend}>\n    Send\n  </button>\n</div>\n    </div>\n  );\n};\n\nexport default ChatComponent;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}