{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import'./ChatComponent.css';// Assume you have a CSS file for styles\nimport{io}from'socket.io-client';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const ChatComponent=()=>{const[userInput,setUserInput]=useState('');const[disableSend,setDisableSend]=useState(false);const[selectedVoice,setSelectedVoice]=useState('');const[selectedLanguage,setSelectedLanguage]=useState('');const[chatMessages,setChatMessages]=useState([]);const[voices,setVoices]=useState([]);const[languages,setLanguages]=useState([]);const[msgId,setMsgId]=useState(0);const audioPlayerRef=useRef(null);const voiceRef=useRef(null);const[userName,setUserName]=useState('User');const[audioQueue,setAudiQueue]=useState([]);audioPlayerRef.current=new Audio();const[isLoading,setIsLoading]=useState(false);const ref=useRef(null);ref.current=msgId;useEffect(()=>{setAudiQueue([]);fetchData();const socket=io('http://3.38.153.110:5000',{path:'/chat-ws',transports:['websocket'],autoConnect:true});socket.on('connect',()=>{console.log('connected');});socket.on('error',error=>{console.log('error',error);});socket.on(\"\".concat(userName),handleIncomingMessage);return()=>{socket.off(\"\".concat(userName),handleIncomingMessage);socket.disconnect();};},[]);const fetchData=async()=>{try{console.log('Fetching config data from server...');const response=await fetch('http://3.38.153.110:5000/config');if(response.ok){const data=await response.json();const voiceEntries=Object.entries(data.voices).map(_ref=>{let[label,value]=_ref;return{label,value};});const languageEntries=Object.entries(data.languages).map(_ref2=>{let[label,value]=_ref2;return{label,value};});setVoices(voiceEntries);setLanguages(languageEntries);// Set default selected values\nif(voiceEntries.length>0){setSelectedVoice(voiceEntries[0].value);voiceRef.current=voiceEntries[0].value;}if(languageEntries.length>0){setSelectedLanguage(languageEntries[0].value);}}else{console.error('Failed to fetch data from the server:',response.statusText);}}catch(error){console.error('An error occurred while fetching data:',error);}};const handleIncomingAudio=async data=>{if(data){setAudiQueue(prevAudioQueue=>{// Create a new copy of the array with the updated data\nconst updatedItems=[...prevAudioQueue,data];return updatedItems;});}};const[isPlaying,setIsPlaying]=useState(false);useEffect(()=>{if(!isPlaying&&audioQueue.length>0){const nextAudio=audioQueue[0];playAudio(nextAudio.audioData);// Only play audio, do not set text here\nsetAudiQueue(prevQueue=>prevQueue.slice(1));// Remove the played audio from the queue\n}},[audioQueue,isPlaying]);const playAudio=base64Data=>{setIsPlaying(true);// Play the audio\nconst audio=new Audio('data:audio/mpeg;base64,'+base64Data);audio.onended=()=>setIsPlaying(false);audioPlayerRef.current=audio;audioPlayerRef.current.play();};useEffect(()=>{// Scroll to the bottom of the chat container whenever chatMessages change\nif(chatContainerRef.current){chatContainerRef.current.scrollTop=chatContainerRef.current.scrollHeight;}},[chatMessages]);const chatContainerRef=useRef(null);useEffect(()=>{// Scroll to the bottom of the chat container whenever chatMessages change\nchatContainerRef.current.scrollTop=chatContainerRef.current.scrollHeight;},[chatMessages]);useEffect(()=>{console.log('Voices:',voices);console.log('Languages:',languages);},[voices,languages]);const sendMessage=async()=>{if(!userInput.trim()){console.log('No input to send');return;}setDisableSend(true);setIsLoading(true);setMsgId(prev=>prev+1);try{// Combine user input with language code if necessary\n// For example, 'en:Hello' if English is selected.\nconst combinedInput=\"\".concat(selectedLanguage,\":\").concat(userInput);setChatMessages(previousMessages=>previousMessages.concat({type:'user',name:userName,text:userInput}));setUserInput('');const shouldStream=true;// Prepare the request body by including the combined input\nconst requestBody={user_input:combinedInput,selected_voice:selectedVoice,selected_language:selectedLanguage,// You might not need to send this separately now\nuserName:userName,// we send this for socket connection\nstream:shouldStream};const response=await fetch('http://3.38.153.110:5000/chat',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(requestBody)});setDisableSend(false);if(response.ok){const responseData=await response.json();console.log('Response data from POST /chat:',responseData);console.log('stream finished.');if(!shouldStream){setChatMessages(prevMessages=>[{type:'user',name:userName,text:userInput},{type:'bot',text:responseData.text}]);}}else{console.error('Failed to send message to the server:',response.statusText);}}catch(error){setDisableSend(false);console.error('An error occurred:',error);}// Clear the user input after sending the message\nsetUserInput('');setIsLoading(false);};const handleIncomingMessage=data=>{console.log('Incoming message data:',data);// If there's audio data, add it to the audioQueue state\nif(data.audio){setAudiQueue(prevAudioQueue=>[...prevAudioQueue,{audioData:data.audio}]);}console.log('handleIncomingMessage::'+JSON.stringify(data));setChatMessages(prevMessages=>{console.log('Previous messages:',prevMessages);// Find if the incoming message is a continuation of the last bot message\nconst lastMessage=prevMessages[prevMessages.length-1];let updatedMessages=prevMessages.slice();// Create a copy of the previous messages\nif(lastMessage&&lastMessage.type==='bot'&&lastMessage._id===data._id){// Update the last bot message text\nlastMessage.text+=data.text;console.log(chatMessages);// Update the copy of the messages with the modified last message\nupdatedMessages[prevMessages.length-1]=lastMessage;}else{// Add a new bot message\nconsole.log('Updated messages:',prevMessages);// Add the new message to the copy of messages\nupdatedMessages.push(data);}return updatedMessages;// Return the copy of the messages with the applied changes\n});};const handleLanguageChange=e=>{console.log('Language selected:',e.target.value);setSelectedLanguage(e.target.value);};useEffect(()=>{console.log('Selected language state updated to:',selectedLanguage);},[selectedLanguage]);return/*#__PURE__*/_jsxs(\"div\",{className:\"chat-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat-config\",children:[/*#__PURE__*/_jsx(\"select\",{id:\"voices\",value:selectedVoice,onChange:e=>setSelectedVoice(e.target.value),children:voices.map((voice,index)=>/*#__PURE__*/_jsx(\"option\",{value:voice.value,children:voice.label},index))}),/*#__PURE__*/_jsx(\"select\",{id:\"languages\",value:selectedLanguage,onChange:handleLanguageChange,children:languages.map((language,index)=>/*#__PURE__*/_jsx(\"option\",{value:language.value,children:language.label},index))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-messages\",ref:chatContainerRef,children:[chatMessages.map((msg,index)=>msg.text&&/*#__PURE__*/_jsxs(\"div\",{className:\"message \".concat(msg.type),children:[/*#__PURE__*/_jsx(\"span\",{className:\"message-name \".concat(msg.type==='bot'?'bot-name':''),children:msg.type==='user'?\"\":'MediGenie: '}),/*#__PURE__*/_jsx(\"span\",{className:\"message-text\",children:msg.text})]},index)),isLoading&&/*#__PURE__*/_jsx(\"div\",{className:\"message bot\",children:/*#__PURE__*/_jsx(\"span\",{className:\"message-text\",children:\"MediGenie is thinking...\"})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-input\",children:[/*#__PURE__*/_jsx(\"textarea\",{value:userInput,onChange:e=>setUserInput(e.target.value),onKeyDown:e=>{if(e.key==='Enter'&&!e.shiftKey){e.preventDefault();if(!disableSend){sendMessage();}}},disabled:disableSend,placeholder:\"Ask MediGenie about about your symptoms\"}),/*#__PURE__*/_jsx(\"button\",{onClick:sendMessage,disabled:!userInput.trim()||disableSend,children:\"Send\"})]})]});};export default ChatComponent;","map":{"version":3,"names":["React","useState","useEffect","useRef","io","jsx","_jsx","jsxs","_jsxs","ChatComponent","userInput","setUserInput","disableSend","setDisableSend","selectedVoice","setSelectedVoice","selectedLanguage","setSelectedLanguage","chatMessages","setChatMessages","voices","setVoices","languages","setLanguages","msgId","setMsgId","audioPlayerRef","voiceRef","userName","setUserName","audioQueue","setAudiQueue","current","Audio","isLoading","setIsLoading","ref","fetchData","socket","path","transports","autoConnect","on","console","log","error","concat","handleIncomingMessage","off","disconnect","response","fetch","ok","data","json","voiceEntries","Object","entries","map","_ref","label","value","languageEntries","_ref2","length","statusText","handleIncomingAudio","prevAudioQueue","updatedItems","isPlaying","setIsPlaying","nextAudio","playAudio","audioData","prevQueue","slice","base64Data","audio","onended","play","chatContainerRef","scrollTop","scrollHeight","sendMessage","trim","prev","combinedInput","previousMessages","type","name","text","shouldStream","requestBody","user_input","selected_voice","selected_language","stream","method","headers","body","JSON","stringify","responseData","prevMessages","lastMessage","updatedMessages","_id","push","handleLanguageChange","e","target","className","children","id","onChange","voice","index","language","msg","onKeyDown","key","shiftKey","preventDefault","disabled","placeholder","onClick"],"sources":["/home/ubuntu/influencer/influencer/influencer/frontend/src/components/ChatComponent.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './ChatComponent.css'; // Assume you have a CSS file for styles\nimport { io } from 'socket.io-client';\n\nconst ChatComponent = () => {\n  const [userInput, setUserInput] = useState('');\n  const [disableSend, setDisableSend] = useState(false);\n  const [selectedVoice, setSelectedVoice] = useState('');\n  const [selectedLanguage, setSelectedLanguage] = useState('');\n  const [chatMessages, setChatMessages] = useState([]);\n  const [voices, setVoices] = useState([]);\n  const [languages, setLanguages] = useState([]);\n  const [msgId, setMsgId] = useState(0);\n  const audioPlayerRef = useRef(null);\n  const voiceRef = useRef(null);\n  const [userName, setUserName] = useState('User');\n  const [audioQueue, setAudiQueue] = useState([])\n  audioPlayerRef.current = new Audio()\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const ref = useRef(null);\n  ref.current = msgId;\n\n  useEffect(() => {\n    setAudiQueue([])\n    fetchData();\n\n    const socket = io('http://3.38.153.110:5000', {\n      path: '/chat-ws',\n      transports: ['websocket'],\n      autoConnect: true,\n    });\n    socket.on('connect', () => {\n      console.log('connected');\n    });\n    socket.on('error', error => {\n      console.log('error', error);\n    });\n    socket.on(`${userName}`, handleIncomingMessage);\n\n    return () => {\n      socket.off(`${userName}`, handleIncomingMessage);\n      socket.disconnect();\n    };\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      console.log('Fetching config data from server...');\n      const response = await fetch('http://3.38.153.110:5000/config');\n      if (response.ok) {\n        const data = await response.json();\n        const voiceEntries = Object.entries(data.voices).map(([label, value]) => ({ label, value }));\n        const languageEntries = Object.entries(data.languages).map(([label, value]) => ({ label, value }));\n\n        setVoices(voiceEntries);\n        setLanguages(languageEntries);\n\n        // Set default selected values\n        if (voiceEntries.length > 0) {\n          setSelectedVoice(voiceEntries[0].value);\n          voiceRef.current = voiceEntries[0].value;\n        }\n        if (languageEntries.length > 0) {\n          setSelectedLanguage(languageEntries[0].value);\n        }\n      } else {\n        console.error('Failed to fetch data from the server:', response.statusText);\n      }\n    } catch (error) {\n      console.error('An error occurred while fetching data:', error);\n    }\n  };\n\n  const handleIncomingAudio = async (data) => {\n      if (data) {\n        setAudiQueue((prevAudioQueue) => {\n          // Create a new copy of the array with the updated data\n          const updatedItems = [...prevAudioQueue, data];\n          return updatedItems;\n        });\n      }\n  }\n\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  useEffect(() => {\n    if (!isPlaying && audioQueue.length > 0) {\n      const nextAudio = audioQueue[0];\n      playAudio(nextAudio.audioData); // Only play audio, do not set text here\n      setAudiQueue(prevQueue => prevQueue.slice(1)); // Remove the played audio from the queue\n    }\n  }, [audioQueue, isPlaying]);\n\n  const playAudio = (base64Data) => {\n    setIsPlaying(true);\n\n    // Play the audio\n    const audio = new Audio('data:audio/mpeg;base64,' + base64Data);\n    audio.onended = () => setIsPlaying(false);\n    audioPlayerRef.current = audio;\n    audioPlayerRef.current.play();\n  };\n\n  useEffect(() => {\n    // Scroll to the bottom of the chat container whenever chatMessages change\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n\n  const chatContainerRef = useRef(null);\n\n  useEffect(() => {\n    // Scroll to the bottom of the chat container whenever chatMessages change\n    chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n  }, [chatMessages]);\n\n\n  useEffect(() => {\n    console.log('Voices:', voices);\n    console.log('Languages:', languages);\n  }, [voices, languages]);\n\n  const sendMessage = async () => {\n    if (!userInput.trim()) {\n      console.log('No input to send');\n      return;\n    }\n    setDisableSend(true);\n    setIsLoading(true);\n    setMsgId(prev => prev + 1);\n\n    try {\n      // Combine user input with language code if necessary\n      // For example, 'en:Hello' if English is selected.\n      const combinedInput = `${selectedLanguage}:${userInput}`;\n      setChatMessages(previousMessages =>\n        previousMessages.concat({ type: 'user', name: userName, text: userInput })\n      );\n      setUserInput('');\n      const shouldStream = true;\n      // Prepare the request body by including the combined input\n      const requestBody = {\n        user_input: combinedInput,\n        selected_voice: selectedVoice,\n        selected_language: selectedLanguage, // You might not need to send this separately now\n        userName: userName, // we send this for socket connection\n        stream: shouldStream,\n      };\n\n      const response = await fetch('http://3.38.153.110:5000/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody),\n      });\n      setDisableSend(false);\n\n      if (response.ok) {\n        const responseData = await response.json();\n        console.log('Response data from POST /chat:', responseData);\n        console.log('stream finished.');\n        if (!shouldStream) {\n          setChatMessages(prevMessages => [\n            { type: 'user', name: userName, text: userInput },\n            { type: 'bot', text: responseData.text },\n          ]);\n        }\n      } else {\n        console.error('Failed to send message to the server:', response.statusText);\n      }\n    } catch (error) {\n      setDisableSend(false);\n      console.error('An error occurred:', error);\n    }\n\n    // Clear the user input after sending the message\n    setUserInput('');\n    setIsLoading(false);\n  };\n\n  const handleIncomingMessage = (data) => {\n    console.log('Incoming message data:', data);\n    // If there's audio data, add it to the audioQueue state\n    if (data.audio) {\n      setAudiQueue(prevAudioQueue => [...prevAudioQueue, { audioData: data.audio }]);\n    }\n\n    console.log('handleIncomingMessage::' + JSON.stringify(data));\n\n    setChatMessages((prevMessages) => {\n      console.log('Previous messages:', prevMessages);\n      // Find if the incoming message is a continuation of the last bot message\n      const lastMessage = prevMessages[prevMessages.length - 1];\n      let updatedMessages = prevMessages.slice(); // Create a copy of the previous messages\n\n      if (lastMessage && lastMessage.type === 'bot' && lastMessage._id === data._id) {\n          // Update the last bot message text\n          lastMessage.text += data.text;\n          console.log(chatMessages);\n          // Update the copy of the messages with the modified last message\n          updatedMessages[prevMessages.length - 1] = lastMessage;\n      } else {\n          // Add a new bot message\n          console.log('Updated messages:', prevMessages);\n          // Add the new message to the copy of messages\n          updatedMessages.push(data);\n      }\n\n      return updatedMessages; // Return the copy of the messages with the applied changes\n  });\n};\n\n\n  const handleLanguageChange = (e) => {\n    console.log('Language selected:', e.target.value);\n    setSelectedLanguage(e.target.value);\n  };\n\n  useEffect(() => {\n    console.log('Selected language state updated to:', selectedLanguage);\n  }, [selectedLanguage]);\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-config\">\n        <select id=\"voices\" value={selectedVoice} onChange={(e) => setSelectedVoice(e.target.value)}>\n          {voices.map((voice, index) => (\n            <option key={index} value={voice.value}>\n              {voice.label}\n            </option>\n          ))}\n        </select>\n        <select id=\"languages\" value={selectedLanguage} onChange={handleLanguageChange}>\n  {languages.map((language, index) => (\n    <option key={index} value={language.value}>\n      {language.label}\n    </option>\n  ))}\n</select>\n      </div>\n      <div className=\"chat-messages\" ref={chatContainerRef}>\n      {chatMessages.map((msg, index) => (\n    msg.text && (\n      <div key={index} className={`message ${msg.type}`}>\n        <span className={`message-name ${msg.type === 'bot' ? 'bot-name' : ''}`}>\n          {msg.type === 'user' ? `` : 'MediGenie: '}\n        </span>\n        <span className=\"message-text\">{msg.text}</span>\n      </div>\n    )\n  ))}\n               {isLoading && (\n          <div className=\"message bot\">\n            <span className=\"message-text\">MediGenie is thinking...</span>\n          </div>\n        )}\n      </div>\n      <div className=\"chat-input\">\n      <textarea\n  value={userInput}\n  onChange={(e) => setUserInput(e.target.value)}\n  onKeyDown={(e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      if (!disableSend) {\n        sendMessage();\n      }\n    }\n  }}\n  disabled={disableSend}\n  placeholder=\"Ask MediGenie about about your symptoms\"\n/>\n<button onClick={sendMessage} disabled={!userInput.trim() || disableSend}>\n  Send\n</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatComponent;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}