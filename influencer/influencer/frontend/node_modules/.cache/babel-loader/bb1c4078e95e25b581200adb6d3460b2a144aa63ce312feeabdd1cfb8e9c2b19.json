{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Downloads\\\\\\uCD5C\\uC885\\uC0B0\\uCD9C\\uBB3C (1)\\\\\\uCD5C\\uC885\\uC0B0\\uCD9C\\uBB3C\\\\AI_Plaza-main\\\\influencer\\\\influencer\\\\frontend\\\\src\\\\components\\\\ChatComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatComponent = () => {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [selectedVoice, setSelectedVoice] = useState('');\n  const [selectedLanguage, setSelectedLanguage] = useState('');\n  const [chatMessages, setChatMessages] = useState([]);\n  const [voices, setVoices] = useState([]);\n  const [languages, setLanguages] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        console.log('Fetching config data from server...');\n        const response = await fetch('http://127.0.0.1:5000/config');\n        if (response.ok) {\n          const data = await response.json();\n          const voiceEntries = Object.entries(data.voices).map(([label, value]) => ({\n            label,\n            value\n          }));\n          const languageEntries = Object.entries(data.languages).map(([label, value]) => ({\n            label,\n            value\n          }));\n          setVoices(voiceEntries);\n          setLanguages(languageEntries);\n\n          // Set default selected values\n          if (voiceEntries.length > 0) {\n            setSelectedVoice(voiceEntries[0].value);\n          }\n          if (languageEntries.length > 0) {\n            setSelectedLanguage(languageEntries[0].value);\n          }\n        } else {\n          console.error('Failed to fetch data from the server:', response.statusText);\n        }\n      } catch (error) {\n        console.error('An error occurred while fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    console.log('Voices:', voices);\n    console.log('Languages:', languages);\n  }, [voices, languages]);\n  const sendMessage = async () => {\n    try {\n      // Create a combined message that includes the selected language and the user input\n      const combinedInput = `${selectedLanguage}: ${userInput}`;\n\n      // Create a new message object for the user's message\n      const userMessage = {\n        type: 'user',\n        text: combinedInput\n      };\n\n      // Update the chatMessages state with the user's message\n      setChatMessages(prevMessages => [...prevMessages, userMessage]);\n\n      // Prepare the request body by including the combined input\n      const requestBody = {\n        user_input: combinedInput,\n        selected_voice: selectedVoice,\n        selected_language: selectedLanguage\n      };\n      const response = await fetch('http://127.0.0.1:5000/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n      if (response.ok) {\n        const responseData = await response.json();\n\n        // Create a new message object for the bot's response\n        const botMessage = {\n          type: 'bot',\n          text: responseData.text\n        };\n\n        // Update the chatMessages state with the bot's response\n        setChatMessages(prevMessages => [...prevMessages, botMessage]);\n\n        // Play the audio (if needed)\n        const audio = new Audio('data:audio/mpeg;base64,' + responseData.audio);\n        audio.play();\n      } else {\n        console.error('Failed to send message to the server:', response.statusText);\n      }\n    } catch (error) {\n      console.error('An error occurred while sending the message:', error);\n    }\n    if (!userInput.trim()) {\n      // Optionally, you could provide some feedback to the user here.\n      console.log('No input to send');\n      return; // Early return if userInput is empty or whitespace\n    }\n\n    try {\n      // The rest of your sendMessage logic...\n    } catch (error) {\n      console.error('An error occurred:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"voices\",\n        value: selectedVoice,\n        onChange: e => setSelectedVoice(e.target.value),\n        children: voices.map((voice, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: voice.value,\n          children: voice.label\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 5\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"languages\",\n        value: selectedLanguage,\n        onChange: e => setSelectedLanguage(e.target.value),\n        children: languages.map((language, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: language.value,\n          children: language.label\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 5\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        onKeyDown: e => {\n          // Check if the Enter key is pressed and not holding Shift\n          if (e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault(); // Prevent the default action to avoid a new line\n            sendMessage(); // Call the sendMessage function\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        disabled: !userInput.trim(),\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatComponent, \"Ojql+a1ga2tJCiTNvZUROhNo5GI=\");\n_c = ChatComponent;\nexport default ChatComponent;\nvar _c;\n$RefreshReg$(_c, \"ChatComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ChatComponent","_s","userInput","setUserInput","selectedVoice","setSelectedVoice","selectedLanguage","setSelectedLanguage","chatMessages","setChatMessages","voices","setVoices","languages","setLanguages","fetchData","console","log","response","fetch","ok","data","json","voiceEntries","Object","entries","map","label","value","languageEntries","length","error","statusText","sendMessage","combinedInput","userMessage","type","text","prevMessages","requestBody","user_input","selected_voice","selected_language","method","headers","body","JSON","stringify","responseData","botMessage","audio","Audio","play","trim","children","id","onChange","e","target","voice","index","fileName","_jsxFileName","lineNumber","columnNumber","language","onKeyDown","key","shiftKey","preventDefault","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Downloads/최종산출물 (1)/최종산출물/AI_Plaza-main/influencer/influencer/frontend/src/components/ChatComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst ChatComponent = () => {\r\n  const [userInput, setUserInput] = useState('');\r\n  const [selectedVoice, setSelectedVoice] = useState('');\r\n  const [selectedLanguage, setSelectedLanguage] = useState('');\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [voices, setVoices] = useState([]);\r\n  const [languages, setLanguages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        console.log('Fetching config data from server...');\r\n        const response = await fetch('http://127.0.0.1:5000/config');\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          const voiceEntries = Object.entries(data.voices).map(([label, value]) => ({ label, value }));\r\n          const languageEntries = Object.entries(data.languages).map(([label, value]) => ({ label, value }));\r\n  \r\n          setVoices(voiceEntries);\r\n          setLanguages(languageEntries);\r\n  \r\n          // Set default selected values\r\n          if (voiceEntries.length > 0) {\r\n            setSelectedVoice(voiceEntries[0].value);\r\n          }\r\n          if (languageEntries.length > 0) {\r\n            setSelectedLanguage(languageEntries[0].value);\r\n          }\r\n        } else {\r\n          console.error('Failed to fetch data from the server:', response.statusText);\r\n        }\r\n      } catch (error) {\r\n        console.error('An error occurred while fetching data:', error);\r\n      }\r\n    };\r\n  \r\n    fetchData();\r\n  }, []);\r\n  \r\n\r\n  useEffect(() => {\r\n    console.log('Voices:', voices);\r\n    console.log('Languages:', languages);\r\n  }, [voices, languages]);\r\n\r\n  const sendMessage = async () => {\r\n    try {\r\n      // Create a combined message that includes the selected language and the user input\r\n      const combinedInput = `${selectedLanguage}: ${userInput}`;\r\n  \r\n      // Create a new message object for the user's message\r\n      const userMessage = {\r\n        type: 'user',\r\n        text: combinedInput,\r\n      };\r\n  \r\n      // Update the chatMessages state with the user's message\r\n      setChatMessages((prevMessages) => [...prevMessages, userMessage]);\r\n  \r\n      // Prepare the request body by including the combined input\r\n      const requestBody = {\r\n        user_input: combinedInput,\r\n        selected_voice: selectedVoice,\r\n        selected_language: selectedLanguage,\r\n      };\r\n  \r\n      const response = await fetch('http://127.0.0.1:5000/chat', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(requestBody),\r\n      });\r\n  \r\n      if (response.ok) {\r\n        const responseData = await response.json();\r\n  \r\n        // Create a new message object for the bot's response\r\n        const botMessage = {\r\n          type: 'bot',\r\n          text: responseData.text,\r\n        };\r\n  \r\n        // Update the chatMessages state with the bot's response\r\n        setChatMessages((prevMessages) => [...prevMessages, botMessage]);\r\n  \r\n        // Play the audio (if needed)\r\n        const audio = new Audio('data:audio/mpeg;base64,' + responseData.audio);\r\n        audio.play();\r\n      } else {\r\n        console.error('Failed to send message to the server:', response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error('An error occurred while sending the message:', error);\r\n    }\r\n\r\n    if (!userInput.trim()) {\r\n        // Optionally, you could provide some feedback to the user here.\r\n        console.log('No input to send');\r\n        return; // Early return if userInput is empty or whitespace\r\n      }\r\n    \r\n      try {\r\n        // The rest of your sendMessage logic...\r\n      } catch (error) {\r\n        console.error('An error occurred:', error);\r\n      }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n<select id=\"voices\" value={selectedVoice} onChange={(e) => setSelectedVoice(e.target.value)}>\r\n  {voices.map((voice, index) => (\r\n    <option key={index} value={voice.value}>\r\n      {voice.label}\r\n    </option>\r\n  ))}\r\n</select>\r\n<select id=\"languages\" value={selectedLanguage} onChange={(e) => setSelectedLanguage(e.target.value)}>\r\n  {languages.map((language, index) => (\r\n    <option key={index} value={language.value}>\r\n      {language.label}\r\n    </option>\r\n  ))}\r\n</select>\r\n      </div>\r\n      <div>\r\n      <textarea\r\n  value={userInput}\r\n  onChange={(e) => setUserInput(e.target.value)}\r\n  onKeyDown={(e) => {\r\n    // Check if the Enter key is pressed and not holding Shift\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();  // Prevent the default action to avoid a new line\r\n      sendMessage();       // Call the sendMessage function\r\n    }\r\n  }}\r\n/>\r\n<button onClick={sendMessage} disabled={!userInput.trim()}>Send</button>\r\n</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}