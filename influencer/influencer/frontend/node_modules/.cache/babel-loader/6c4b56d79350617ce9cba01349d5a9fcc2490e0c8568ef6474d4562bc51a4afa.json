{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Downloads\\\\\\uCD5C\\uC885\\uC0B0\\uCD9C\\uBB3C (1)\\\\\\uCD5C\\uC885\\uC0B0\\uCD9C\\uBB3C\\\\AI_Plaza-main\\\\influencer\\\\influencer\\\\influencer\\\\frontend\\\\src\\\\components\\\\ChatComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ChatComponent.css'; // Assume you have a CSS file for styles\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatComponent = () => {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [disableSend, setDisableSend] = useState(false);\n  const [selectedVoice, setSelectedVoice] = useState('');\n  const [selectedLanguage, setSelectedLanguage] = useState('');\n  const [chatMessages, setChatMessages] = useState([]);\n  const [voices, setVoices] = useState([]);\n  const [languages, setLanguages] = useState([]);\n  const [msgId, setMsgId] = useState(0);\n  const audioPlayerRef = useRef(null);\n  const voiceRef = useRef(null);\n  const [userName, setUserName] = useState('User');\n  const [audioQueue, setAudiQueue] = useState([]);\n  audioPlayerRef.current = new Audio();\n  const [botResponse, setBotResponse] = useState('');\n  const ref = useRef(null);\n  ref.current = msgId;\n  useEffect(() => {\n    setAudiQueue([]);\n    fetchData();\n    const socket = io('http://127.0.0.1:5001', {\n      path: '/chat-ws',\n      transports: ['websocket'],\n      autoConnect: true\n    });\n    socket.on('connect', () => {\n      console.log('connected');\n    });\n    socket.on('error', error => {\n      console.log('error', error);\n    });\n    socket.on(`${userName}`, handleIncomingMessage);\n    return () => {\n      socket.off(`${userName}`, handleIncomingMessage);\n      socket.disconnect();\n    };\n  }, []);\n  const fetchData = async () => {\n    try {\n      console.log('Fetching config data from server...');\n      const response = await fetch('http://127.0.0.1:5001/config');\n      if (response.ok) {\n        const data = await response.json();\n        const voiceEntries = Object.entries(data.voices).map(([label, value]) => ({\n          label,\n          value\n        }));\n        const languageEntries = Object.entries(data.languages).map(([label, value]) => ({\n          label,\n          value\n        }));\n        setVoices(voiceEntries);\n        setLanguages(languageEntries);\n\n        // Set default selected values\n        if (voiceEntries.length > 0) {\n          setSelectedVoice(voiceEntries[0].value);\n          voiceRef.current = voiceEntries[0].value;\n        }\n        if (languageEntries.length > 0) {\n          setSelectedLanguage(languageEntries[0].value);\n        }\n      } else {\n        console.error('Failed to fetch data from the server:', response.statusText);\n      }\n    } catch (error) {\n      console.error('An error occurred while fetching data:', error);\n    }\n  };\n  const handleIncomingAudio = async data => {\n    if (data) {\n      setAudiQueue(prevAudioQueue => {\n        // Create a new copy of the array with the updated data\n        const updatedItems = [...prevAudioQueue, data];\n        return updatedItems;\n      });\n    }\n  };\n  const [isPlaying, setIsPlaying] = useState(false);\n  useEffect(() => {\n    if (!isPlaying && audioQueue.length > 0) {\n      const nextAudio = audioQueue[0];\n      playAudio(nextAudio.audioData); // Only play audio, do not set text here\n      setAudiQueue(prevQueue => prevQueue.slice(1)); // Remove the played audio from the queue\n    }\n  }, [audioQueue, isPlaying]);\n  const playAudio = base64Data => {\n    setIsPlaying(true);\n\n    // Play the audio\n    const audio = new Audio('data:audio/mpeg;base64,' + base64Data);\n    audio.onended = () => setIsPlaying(false);\n    audioPlayerRef.current = audio;\n    audioPlayerRef.current.play();\n  };\n  useEffect(() => {\n    console.log('Voices:', voices);\n    console.log('Languages:', languages);\n  }, [voices, languages]);\n  const sendMessage = async () => {\n    if (!userInput.trim() || disableSend) {\n      return;\n    }\n    setDisableSend(true);\n    setMsgId(prev => prev + 1);\n    try {\n      // Combine user input with language code if necessary\n      // For example, 'en:Hello' if English is selected.\n      const combinedInput = `${selectedLanguage}:${userInput}`;\n      setChatMessages(previousMessages => previousMessages.concat({\n        type: 'user',\n        name: userName,\n        text: userInput\n      }));\n      setUserInput('');\n      const shouldStream = true;\n      // Prepare the request body by including the combined input\n      const requestBody = {\n        user_input: combinedInput,\n        selected_voice: selectedVoice,\n        selected_language: selectedLanguage,\n        // You might not need to send this separately now\n        userName: userName,\n        // we send this for socket connection\n        stream: shouldStream\n      };\n      const response = await fetch('http://127.0.0.1:5001/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n      setDisableSend(false);\n      if (response.ok) {\n        const responseData = await response.json();\n        console.log('Response data from POST /chat:', responseData);\n        console.log('stream finished.');\n        if (!shouldStream) {\n          setChatMessages(prevMessages => [...prevMessages, {\n            type: 'user',\n            name: userName,\n            text: userInput\n          }, {\n            type: 'bot',\n            text: responseData.text\n          }]);\n        }\n      } else {\n        console.error('Failed to send message to the server:', response.statusText);\n      }\n    } catch (error) {\n      setDisableSend(false);\n      console.error('An error occurred:', error);\n    }\n\n    // Clear the user input after sending the message\n    setUserInput('');\n  };\n  const handleIncomingMessage = data => {\n    console.log('Incoming message data:', data);\n\n    // Handle the text part of the message\n    if (data.text) {\n      setChatMessages(prevMessages => {\n        // Avoid duplicate messages if they have a unique ID\n        const existingMessageIndex = prevMessages.findIndex(message => message._id === data._id);\n        if (existingMessageIndex > -1) {\n          // If the message already exists, update its text\n          const updatedMessages = [...prevMessages];\n          updatedMessages[existingMessageIndex] = {\n            ...updatedMessages[existingMessageIndex],\n            text: data.text\n          };\n          return updatedMessages;\n        } else {\n          // If the message is new, add it to the array\n          return [...prevMessages, {\n            type: 'bot',\n            name: 'Bot',\n            text: data.text,\n            _id: data._id\n          }];\n        }\n      });\n    }\n\n    // If there's audio data, add it to the audioQueue state\n    if (data.audio) {\n      setAudiQueue(prevAudioQueue => [...prevAudioQueue, {\n        audioData: data.audio\n      }]);\n    }\n    console.log('handleIncomingMessage::' + JSON.stringify(data));\n    setChatMessages(prevMessages => {\n      console.log('Previous messages:', prevMessages);\n      // Find if the incoming message is a continuation of the last bot message\n      const lastMessage = prevMessages[prevMessages.length - 1];\n      if (lastMessage && lastMessage.type === 'bot' && lastMessage._id === data._id) {\n        // Update the last bot message text\n        lastMessage.text += data.text;\n        console.log(chatMessages);\n        return [...prevMessages.slice(0, -1), lastMessage];\n      } else {\n        // Add a new bot message\n        console.log('Updated messages:', prevMessages);\n        return [...prevMessages, data];\n      }\n    });\n  };\n  const handleLanguageChange = e => {\n    console.log('Language selected:', e.target.value);\n    setSelectedLanguage(e.target.value);\n  };\n  useEffect(() => {\n    console.log('Selected language state updated to:', selectedLanguage);\n  }, [selectedLanguage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-config\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"voices\",\n        value: selectedVoice,\n        onChange: e => setSelectedVoice(e.target.value),\n        children: voices.map((voice, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: voice.value,\n          children: voice.label\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"languages\",\n        value: selectedLanguage,\n        onChange: handleLanguageChange,\n        children: languages.map((language, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: language.value,\n          children: language.label\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 5\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: chatMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.type}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-name\",\n          children: msg.type === 'user' ? userName : 'Bot'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-text\",\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 7\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 5\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        onKeyDown: e => {\n          if (e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault();\n            if (!disableSend) {\n              sendMessage();\n            }\n          }\n        },\n        disabled: disableSend,\n        placeholder: \"Type your message here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        disabled: !userInput.trim() || disableSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatComponent, \"XaePtMtavFVq+jRDhjix3RAYusE=\");\n_c = ChatComponent;\nexport default ChatComponent;\nvar _c;\n$RefreshReg$(_c, \"ChatComponent\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","jsxDEV","_jsxDEV","ChatComponent","_s","userInput","setUserInput","disableSend","setDisableSend","selectedVoice","setSelectedVoice","selectedLanguage","setSelectedLanguage","chatMessages","setChatMessages","voices","setVoices","languages","setLanguages","msgId","setMsgId","audioPlayerRef","voiceRef","userName","setUserName","audioQueue","setAudiQueue","current","Audio","botResponse","setBotResponse","ref","fetchData","socket","path","transports","autoConnect","on","console","log","error","handleIncomingMessage","off","disconnect","response","fetch","ok","data","json","voiceEntries","Object","entries","map","label","value","languageEntries","length","statusText","handleIncomingAudio","prevAudioQueue","updatedItems","isPlaying","setIsPlaying","nextAudio","playAudio","audioData","prevQueue","slice","base64Data","audio","onended","play","sendMessage","trim","prev","combinedInput","previousMessages","concat","type","name","text","shouldStream","requestBody","user_input","selected_voice","selected_language","stream","method","headers","body","JSON","stringify","responseData","prevMessages","existingMessageIndex","findIndex","message","_id","updatedMessages","lastMessage","handleLanguageChange","e","target","className","children","id","onChange","voice","index","fileName","_jsxFileName","lineNumber","columnNumber","language","msg","onKeyDown","key","shiftKey","preventDefault","disabled","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Downloads/최종산출물 (1)/최종산출물/AI_Plaza-main/influencer/influencer/influencer/frontend/src/components/ChatComponent.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './ChatComponent.css'; // Assume you have a CSS file for styles\r\nimport { io } from 'socket.io-client';\r\n\r\nconst ChatComponent = () => {\r\n  const [userInput, setUserInput] = useState('');\r\n  const [disableSend, setDisableSend] = useState(false);\r\n  const [selectedVoice, setSelectedVoice] = useState('');\r\n  const [selectedLanguage, setSelectedLanguage] = useState('');\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [voices, setVoices] = useState([]);\r\n  const [languages, setLanguages] = useState([]);\r\n  const [msgId, setMsgId] = useState(0);\r\n  const audioPlayerRef = useRef(null);\r\n  const voiceRef = useRef(null);\r\n  const [userName, setUserName] = useState('User');\r\n  const [audioQueue, setAudiQueue] = useState([])\r\n  audioPlayerRef.current = new Audio()\r\n  const [botResponse, setBotResponse] = useState('');\r\n\r\n  const ref = useRef(null);\r\n  ref.current = msgId;\r\n\r\n  useEffect(() => {\r\n    setAudiQueue([])\r\n    fetchData();\r\n    \r\n    const socket = io('http://127.0.0.1:5001', {\r\n      path: '/chat-ws',\r\n      transports: ['websocket'],\r\n      autoConnect: true,\r\n    });\r\n    socket.on('connect', () => {\r\n      console.log('connected');\r\n    });\r\n    socket.on('error', error => {\r\n      console.log('error', error);\r\n    });\r\n    socket.on(`${userName}`, handleIncomingMessage);\r\n\r\n    return () => {\r\n      socket.off(`${userName}`, handleIncomingMessage);\r\n      socket.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      console.log('Fetching config data from server...');\r\n      const response = await fetch('http://127.0.0.1:5001/config');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        const voiceEntries = Object.entries(data.voices).map(([label, value]) => ({ label, value }));\r\n        const languageEntries = Object.entries(data.languages).map(([label, value]) => ({ label, value }));\r\n\r\n        setVoices(voiceEntries);\r\n        setLanguages(languageEntries);\r\n\r\n        // Set default selected values\r\n        if (voiceEntries.length > 0) {\r\n          setSelectedVoice(voiceEntries[0].value);\r\n          voiceRef.current = voiceEntries[0].value;\r\n        }\r\n        if (languageEntries.length > 0) {\r\n          setSelectedLanguage(languageEntries[0].value);\r\n        }\r\n      } else {\r\n        console.error('Failed to fetch data from the server:', response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error('An error occurred while fetching data:', error);\r\n    }\r\n  };\r\n  \r\n  const handleIncomingAudio = async (data) => {\r\n      if (data) {\r\n        setAudiQueue((prevAudioQueue) => {\r\n          // Create a new copy of the array with the updated data\r\n          const updatedItems = [...prevAudioQueue, data];\r\n          return updatedItems;\r\n        });\r\n      }\r\n  }\r\n\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!isPlaying && audioQueue.length > 0) {\r\n      const nextAudio = audioQueue[0];\r\n      playAudio(nextAudio.audioData); // Only play audio, do not set text here\r\n      setAudiQueue(prevQueue => prevQueue.slice(1)); // Remove the played audio from the queue\r\n    }\r\n  }, [audioQueue, isPlaying]);\r\n\r\n  const playAudio = (base64Data) => {\r\n    setIsPlaying(true);\r\n  \r\n    // Play the audio\r\n    const audio = new Audio('data:audio/mpeg;base64,' + base64Data);\r\n    audio.onended = () => setIsPlaying(false);\r\n    audioPlayerRef.current = audio;\r\n    audioPlayerRef.current.play();\r\n  };\r\n  \r\n\r\n  useEffect(() => {\r\n    console.log('Voices:', voices);\r\n    console.log('Languages:', languages);\r\n  }, [voices, languages]);\r\n\r\n  const sendMessage = async () => {\r\n    if (!userInput.trim() || disableSend) {\r\n      return;\r\n    }\r\n    setDisableSend(true);\r\n    setMsgId(prev => prev + 1);\r\n\r\n    try {\r\n      // Combine user input with language code if necessary\r\n      // For example, 'en:Hello' if English is selected.\r\n      const combinedInput = `${selectedLanguage}:${userInput}`;\r\n      setChatMessages(previousMessages =>\r\n        previousMessages.concat({ type: 'user', name: userName, text: userInput })\r\n      );\r\n      setUserInput('');\r\n      const shouldStream = true;\r\n      // Prepare the request body by including the combined input\r\n      const requestBody = {\r\n        user_input: combinedInput,\r\n        selected_voice: selectedVoice,\r\n        selected_language: selectedLanguage, // You might not need to send this separately now\r\n        userName: userName, // we send this for socket connection\r\n        stream: shouldStream,\r\n      };\r\n      \r\n      const response = await fetch('http://127.0.0.1:5001/chat', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(requestBody),\r\n      });\r\n      setDisableSend(false);\r\n      \r\n      if (response.ok) {\r\n        const responseData = await response.json();\r\n        console.log('Response data from POST /chat:', responseData);\r\n        console.log('stream finished.');\r\n        if (!shouldStream) {\r\n          setChatMessages(prevMessages => [\r\n            ...prevMessages,\r\n            { type: 'user', name: userName, text: userInput },\r\n            { type: 'bot', text: responseData.text },\r\n          ]);\r\n        }\r\n      } else {\r\n        console.error('Failed to send message to the server:', response.statusText);\r\n      }\r\n    } catch (error) {\r\n      setDisableSend(false);\r\n      console.error('An error occurred:', error);\r\n    }\r\n  \r\n    // Clear the user input after sending the message\r\n    setUserInput('');\r\n  };\r\n\r\n  const handleIncomingMessage = (data) => {\r\n    console.log('Incoming message data:', data);\r\n    \r\n    // Handle the text part of the message\r\n    if (data.text) {\r\n      setChatMessages(prevMessages => {\r\n        // Avoid duplicate messages if they have a unique ID\r\n        const existingMessageIndex = prevMessages.findIndex(message => message._id === data._id);\r\n        if (existingMessageIndex > -1) {\r\n          // If the message already exists, update its text\r\n          const updatedMessages = [...prevMessages];\r\n          updatedMessages[existingMessageIndex] = { ...updatedMessages[existingMessageIndex], text: data.text };\r\n          return updatedMessages;\r\n        } else {\r\n          // If the message is new, add it to the array\r\n          return [...prevMessages, { type: 'bot', name: 'Bot', text: data.text, _id: data._id }];\r\n        }\r\n      });\r\n    }\r\n  \r\n    // If there's audio data, add it to the audioQueue state\r\n    if (data.audio) {\r\n      setAudiQueue(prevAudioQueue => [...prevAudioQueue, { audioData: data.audio }]);\r\n    }\r\n\r\n    console.log('handleIncomingMessage::' + JSON.stringify(data));\r\n\r\n    setChatMessages((prevMessages) => {\r\n      console.log('Previous messages:', prevMessages);\r\n      // Find if the incoming message is a continuation of the last bot message\r\n      const lastMessage = prevMessages[prevMessages.length - 1];\r\n      if (lastMessage && lastMessage.type === 'bot' && lastMessage._id === data._id) {\r\n          // Update the last bot message text\r\n          lastMessage.text += data.text;\r\n          console.log(chatMessages);\r\n          return [...prevMessages.slice(0, -1), lastMessage];\r\n      } else {\r\n          // Add a new bot message\r\n          console.log('Updated messages:', prevMessages);\r\n          return [...prevMessages, data];\r\n      }\r\n  });\r\n};\r\n\r\n\r\n  const handleLanguageChange = (e) => {\r\n    console.log('Language selected:', e.target.value);\r\n    setSelectedLanguage(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log('Selected language state updated to:', selectedLanguage);\r\n  }, [selectedLanguage]);\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"chat-config\">\r\n        <select id=\"voices\" value={selectedVoice} onChange={(e) => setSelectedVoice(e.target.value)}>\r\n          {voices.map((voice, index) => (\r\n            <option key={index} value={voice.value}>\r\n              {voice.label}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <select id=\"languages\" value={selectedLanguage} onChange={handleLanguageChange}>\r\n  {languages.map((language, index) => (\r\n    <option key={index} value={language.value}>\r\n      {language.label}\r\n    </option>\r\n  ))}\r\n</select>\r\n      </div>\r\n      <div className=\"chat-messages\">\r\n  {chatMessages.map((msg, index) => (\r\n    <div key={index} className={`message ${msg.type}`}>\r\n      <span className=\"message-name\">{msg.type === 'user' ? userName : 'Bot'}</span>\r\n      <span className=\"message-text\">{msg.text}</span>\r\n    </div>\r\n  ))}\r\n</div>\r\n      <div className=\"chat-input\">\r\n      <textarea\r\n  value={userInput}\r\n  onChange={(e) => setUserInput(e.target.value)}\r\n  onKeyDown={(e) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      if (!disableSend) {\r\n        sendMessage();\r\n      }\r\n    }\r\n  }}\r\n  disabled={disableSend}\r\n  placeholder=\"Type your message here...\"\r\n/>\r\n<button onClick={sendMessage} disabled={!userInput.trim() || disableSend}>\r\n  Send\r\n</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatComponent;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}