{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Downloads\\\\\\uCD5C\\uC885\\uC0B0\\uCD9C\\uBB3C (1)\\\\\\uCD5C\\uC885\\uC0B0\\uCD9C\\uBB3C\\\\AI_Plaza-main\\\\influencer\\\\influencer\\\\influencer\\\\frontend\\\\src\\\\components\\\\ChatComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ChatComponent.css'; // Assume you have a CSS file for styles\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatComponent = () => {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [disableSend, setDisableSend] = useState(false);\n  const [selectedVoice, setSelectedVoice] = useState('');\n  const [selectedLanguage, setSelectedLanguage] = useState('');\n  const [chatMessages, setChatMessages] = useState([]);\n  const [voices, setVoices] = useState([]);\n  const [languages, setLanguages] = useState([]);\n  const [msgId, setMsgId] = useState(0);\n  const audioPlayerRef = useRef(null);\n  const voiceRef = useRef(null);\n  const [userName, setUserName] = useState('User');\n  const [audioQueue, setAudiQueue] = useState([]);\n  audioPlayerRef.current = new Audio();\n  const socket = useRef(null);\n  const ref = useRef(null);\n  ref.current = msgId;\n  useEffect(() => {\n    // Initialize socket connection\n    socket.current = io('http://127.0.0.1:5001', {\n      path: '/chat-ws',\n      transports: ['websocket'],\n      autoConnect: true\n    });\n\n    // Set up socket event listeners\n    socket.current.on('connect', () => {\n      console.log('connected');\n    });\n    socket.current.on('error', error => {\n      console.log('error', error);\n    });\n    socket.current.on(`${userName}`, handleIncomingMessage);\n    return () => {\n      socket.current.off(`${userName}`, handleIncomingMessage);\n      socket.current.disconnect();\n    };\n  }, [userName]);\n  const fetchData = async () => {\n    try {\n      console.log('Fetching config data from server...');\n      const response = await fetch('http://127.0.0.1:5001/config');\n      if (response.ok) {\n        const data = await response.json();\n        const voiceEntries = Object.entries(data.voices).map(([label, value]) => ({\n          label,\n          value\n        }));\n        const languageEntries = Object.entries(data.languages).map(([label, value]) => ({\n          label,\n          value\n        }));\n        setVoices(voiceEntries);\n        setLanguages(languageEntries);\n\n        // Set default selected values\n        if (voiceEntries.length > 0) {\n          setSelectedVoice(voiceEntries[0].value);\n          voiceRef.current = voiceEntries[0].value;\n        }\n        if (languageEntries.length > 0) {\n          setSelectedLanguage(languageEntries[0].value);\n        }\n      } else {\n        console.error('Failed to fetch data from the server:', response.statusText);\n      }\n    } catch (error) {\n      console.error('An error occurred while fetching data:', error);\n    }\n  };\n  const handleIncomingAudio = async data => {\n    if (data) {\n      setAudiQueue(prevAudioQueue => {\n        // Create a new copy of the array with the updated data\n        const updatedItems = [...prevAudioQueue, data];\n        return updatedItems;\n      });\n    }\n  };\n  const [isPlaying, setIsPlaying] = useState(false);\n  useEffect(() => {\n    // Play the next audio when the audioQueue is not empty and there's no audio currently playing.\n    if (!isPlaying && audioQueue.length > 0) {\n      const nextAudio = audioQueue[0];\n      playAudio(nextAudio);\n      // Remove the played audio from the queue.\n      setAudiQueue(prevQueue => prevQueue.slice(1));\n    }\n  }, [audioQueue, isPlaying]);\n  const playAudio = base64Data => {\n    setIsPlaying(true);\n    const audio = new Audio('data:audio/mpeg;base64,' + base64Data);\n    audio.onended = () => {\n      setIsPlaying(false);\n    };\n    audioPlayerRef.current = audio;\n    audioPlayerRef.current.play();\n  };\n  useEffect(() => {\n    console.log('Voices:', voices);\n    console.log('Languages:', languages);\n  }, [voices, languages]);\n  const sendMessage = async () => {\n    if (!userInput.trim()) {\n      console.log('No input to send');\n      return;\n    }\n    setDisableSend(true);\n    setMsgId(prev => prev + 1);\n    try {\n      // Combine user input with language code if necessary\n      // For example, 'en:Hello' if English is selected.\n      const combinedInput = `${selectedLanguage}:${userInput}`;\n      setChatMessages(previousMessages => previousMessages.concat({\n        type: 'user',\n        name: userName,\n        text: userInput\n      }));\n      setUserInput('');\n      const shouldStream = true;\n      // Prepare the request body by including the combined input\n      const requestBody = {\n        user_input: combinedInput,\n        selected_voice: selectedVoice,\n        selected_language: selectedLanguage,\n        // You might not need to send this separately now\n        userName: userName,\n        // we send this for socket connection\n        stream: shouldStream\n      };\n      const response = await fetch('http://127.0.0.1:5001/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n      setDisableSend(false);\n      if (response.ok) {\n        const responseData = await response.json();\n        console.log('stream finished.');\n        if (!shouldStream) {\n          setChatMessages(prevMessages => [...prevMessages, {\n            type: 'user',\n            name: userName,\n            text: userInput\n          }, {\n            type: 'bot',\n            text: responseData.text\n          }]);\n        }\n      } else {\n        console.error('Failed to send message to the server:', response.statusText);\n      }\n    } catch (error) {\n      setDisableSend(false);\n      console.error('An error occurred:', error);\n    }\n\n    // Clear the user input after sending the message\n    setUserInput(''); // Keep this line and remove any other setUserInput('') calls within this function\n    setDisableSend(false);\n  };\n  const handleIncomingMessage = data => {\n    if (data.audio) {\n      handleIncomingAudio(data.audio);\n    } else if (data.text) {\n      // Update chat with new message\n      setChatMessages(prevMessages => {\n        // Check if the message is a continuation of the last bot message\n        const lastMessage = prevMessages[prevMessages.length - 1];\n        if (lastMessage && lastMessage.type === 'bot' && lastMessage._id === data._id) {\n          // Update the last bot message text\n          return prevMessages.map((message, index) => index === prevMessages.length - 1 ? {\n            ...message,\n            text: message.text + data.text\n          } : message);\n        } else {\n          // New bot message\n          return [...prevMessages, {\n            _id: data._id,\n            type: 'bot',\n            text: data.text\n          }];\n        }\n      });\n    }\n  };\n  const handleLanguageChange = e => {\n    console.log('Language selected:', e.target.value);\n    setSelectedLanguage(e.target.value);\n  };\n  useEffect(() => {\n    console.log('Selected language state updated to:', selectedLanguage);\n  }, [selectedLanguage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-config\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"voices\",\n        value: selectedVoice,\n        onChange: e => setSelectedVoice(e.target.value),\n        children: voices.map((voice, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: voice.value,\n          children: voice.label\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"languages\",\n        value: selectedLanguage,\n        onChange: handleLanguageChange,\n        children: languages.map((language, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: language.value,\n          children: language.label\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 5\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: chatMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.type}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-name\",\n          children: msg.type === 'user' ? userName : 'Bot'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-text\",\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 7\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 5\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        onKeyDown: e => {\n          if (e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault();\n            if (!disableSend) {\n              sendMessage();\n            }\n          }\n        },\n        disabled: disableSend,\n        placeholder: \"Type your message here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        disabled: !userInput.trim() || disableSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatComponent, \"Nyhj7gyok2LYb4VhGuiUQDNi7DQ=\");\n_c = ChatComponent;\nexport default ChatComponent;\nvar _c;\n$RefreshReg$(_c, \"ChatComponent\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","jsxDEV","_jsxDEV","ChatComponent","_s","userInput","setUserInput","disableSend","setDisableSend","selectedVoice","setSelectedVoice","selectedLanguage","setSelectedLanguage","chatMessages","setChatMessages","voices","setVoices","languages","setLanguages","msgId","setMsgId","audioPlayerRef","voiceRef","userName","setUserName","audioQueue","setAudiQueue","current","Audio","socket","ref","path","transports","autoConnect","on","console","log","error","handleIncomingMessage","off","disconnect","fetchData","response","fetch","ok","data","json","voiceEntries","Object","entries","map","label","value","languageEntries","length","statusText","handleIncomingAudio","prevAudioQueue","updatedItems","isPlaying","setIsPlaying","nextAudio","playAudio","prevQueue","slice","base64Data","audio","onended","play","sendMessage","trim","prev","combinedInput","previousMessages","concat","type","name","text","shouldStream","requestBody","user_input","selected_voice","selected_language","stream","method","headers","body","JSON","stringify","responseData","prevMessages","lastMessage","_id","message","index","handleLanguageChange","e","target","className","children","id","onChange","voice","fileName","_jsxFileName","lineNumber","columnNumber","language","msg","onKeyDown","key","shiftKey","preventDefault","disabled","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Downloads/최종산출물 (1)/최종산출물/AI_Plaza-main/influencer/influencer/influencer/frontend/src/components/ChatComponent.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './ChatComponent.css'; // Assume you have a CSS file for styles\r\nimport { io } from 'socket.io-client';\r\n\r\nconst ChatComponent = () => {\r\n  const [userInput, setUserInput] = useState('');\r\n  const [disableSend, setDisableSend] = useState(false);\r\n  const [selectedVoice, setSelectedVoice] = useState('');\r\n  const [selectedLanguage, setSelectedLanguage] = useState('');\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [voices, setVoices] = useState([]);\r\n  const [languages, setLanguages] = useState([]);\r\n  const [msgId, setMsgId] = useState(0);\r\n  const audioPlayerRef = useRef(null);\r\n  const voiceRef = useRef(null);\r\n  const [userName, setUserName] = useState('User');\r\n  const [audioQueue, setAudiQueue] = useState([])\r\n  audioPlayerRef.current = new Audio()\r\n  const socket = useRef(null);\r\n\r\n  const ref = useRef(null);\r\n  ref.current = msgId;\r\n\r\n  useEffect(() => {\r\n    // Initialize socket connection\r\n    socket.current = io('http://127.0.0.1:5001', {\r\n        path: '/chat-ws',\r\n        transports: ['websocket'],\r\n        autoConnect: true,\r\n    });\r\n\r\n    // Set up socket event listeners\r\n    socket.current.on('connect', () => {\r\n        console.log('connected');\r\n    });\r\n    socket.current.on('error', error => {\r\n        console.log('error', error);\r\n    });\r\n    socket.current.on(`${userName}`, handleIncomingMessage);\r\n\r\n    return () => {\r\n        socket.current.off(`${userName}`, handleIncomingMessage);\r\n        socket.current.disconnect();\r\n    };\r\n}, [userName]);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      console.log('Fetching config data from server...');\r\n      const response = await fetch('http://127.0.0.1:5001/config');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        const voiceEntries = Object.entries(data.voices).map(([label, value]) => ({ label, value }));\r\n        const languageEntries = Object.entries(data.languages).map(([label, value]) => ({ label, value }));\r\n\r\n        setVoices(voiceEntries);\r\n        setLanguages(languageEntries);\r\n\r\n        // Set default selected values\r\n        if (voiceEntries.length > 0) {\r\n          setSelectedVoice(voiceEntries[0].value);\r\n          voiceRef.current = voiceEntries[0].value;\r\n        }\r\n        if (languageEntries.length > 0) {\r\n          setSelectedLanguage(languageEntries[0].value);\r\n        }\r\n      } else {\r\n        console.error('Failed to fetch data from the server:', response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error('An error occurred while fetching data:', error);\r\n    }\r\n  };\r\n  \r\n  const handleIncomingAudio = async (data) => {\r\n      if (data) {\r\n        setAudiQueue((prevAudioQueue) => {\r\n          // Create a new copy of the array with the updated data\r\n          const updatedItems = [...prevAudioQueue, data];\r\n          return updatedItems;\r\n        });\r\n      }\r\n  }\r\n\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Play the next audio when the audioQueue is not empty and there's no audio currently playing.\r\n    if (!isPlaying && audioQueue.length > 0) {\r\n      const nextAudio = audioQueue[0];\r\n      playAudio(nextAudio);\r\n      // Remove the played audio from the queue.\r\n      setAudiQueue((prevQueue) => prevQueue.slice(1));\r\n    }\r\n  }, [audioQueue, isPlaying]);\r\n\r\n  const playAudio = (base64Data) => {\r\n    setIsPlaying(true);\r\n\r\n    const audio = new Audio('data:audio/mpeg;base64,' + base64Data);\r\n    audio.onended = () => {\r\n      setIsPlaying(false);\r\n    };\r\n\r\n    audioPlayerRef.current = audio;\r\n    audioPlayerRef.current.play();\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log('Voices:', voices);\r\n    console.log('Languages:', languages);\r\n  }, [voices, languages]);\r\n\r\n  const sendMessage = async () => {\r\n    if (!userInput.trim()) {\r\n        console.log('No input to send');\r\n        return;\r\n    }\r\n    setDisableSend(true);\r\n    setMsgId(prev => prev + 1);\r\n\r\n\r\n    try {\r\n      // Combine user input with language code if necessary\r\n      // For example, 'en:Hello' if English is selected.\r\n      const combinedInput = `${selectedLanguage}:${userInput}`;\r\n      setChatMessages(previousMessages =>\r\n        previousMessages.concat({ type: 'user', name: userName, text: userInput })\r\n      );\r\n      setUserInput('');\r\n      const shouldStream = true;\r\n      // Prepare the request body by including the combined input\r\n      const requestBody = {\r\n        user_input: combinedInput,\r\n        selected_voice: selectedVoice,\r\n        selected_language: selectedLanguage, // You might not need to send this separately now\r\n        userName: userName, // we send this for socket connection\r\n        stream: shouldStream,\r\n      };\r\n     \r\n      \r\n      const response = await fetch('http://127.0.0.1:5001/chat', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(requestBody),\r\n      });\r\n      setDisableSend(false);\r\n      \r\n      if (response.ok) {\r\n        const responseData = await response.json();\r\n        console.log('stream finished.');\r\n        if (!shouldStream) {\r\n          setChatMessages(prevMessages => [\r\n            ...prevMessages,\r\n            { type: 'user', name: userName, text: userInput },\r\n            { type: 'bot', text: responseData.text },\r\n          ]);\r\n        }\r\n      } else {\r\n        console.error('Failed to send message to the server:', response.statusText);\r\n      }\r\n    } catch (error) {\r\n      setDisableSend(false);\r\n      console.error('An error occurred:', error);\r\n    }\r\n  \r\n    // Clear the user input after sending the message\r\n    setUserInput(''); // Keep this line and remove any other setUserInput('') calls within this function\r\n    setDisableSend(false);\r\n  };\r\n\r\n  const handleIncomingMessage = (data) => {\r\n    if (data.audio) {\r\n        handleIncomingAudio(data.audio);\r\n    } else if (data.text) {\r\n        // Update chat with new message\r\n        setChatMessages((prevMessages) => {\r\n            // Check if the message is a continuation of the last bot message\r\n            const lastMessage = prevMessages[prevMessages.length - 1];\r\n            if (lastMessage && lastMessage.type === 'bot' && lastMessage._id === data._id) {\r\n                // Update the last bot message text\r\n                return prevMessages.map((message, index) =>\r\n                    index === prevMessages.length - 1 ? { ...message, text: message.text + data.text } : message\r\n                );\r\n            } else {\r\n                // New bot message\r\n                return [...prevMessages, { _id: data._id, type: 'bot', text: data.text }];\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\n  const handleLanguageChange = (e) => {\r\n    console.log('Language selected:', e.target.value);\r\n    setSelectedLanguage(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log('Selected language state updated to:', selectedLanguage);\r\n  }, [selectedLanguage]);\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"chat-config\">\r\n        <select id=\"voices\" value={selectedVoice} onChange={(e) => setSelectedVoice(e.target.value)}>\r\n          {voices.map((voice, index) => (\r\n            <option key={index} value={voice.value}>\r\n              {voice.label}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <select id=\"languages\" value={selectedLanguage} onChange={handleLanguageChange}>\r\n  {languages.map((language, index) => (\r\n    <option key={index} value={language.value}>\r\n      {language.label}\r\n    </option>\r\n  ))}\r\n</select>\r\n      </div>\r\n      <div className=\"chat-messages\">\r\n  {chatMessages.map((msg, index) => (\r\n    <div key={index} className={`message ${msg.type}`}>\r\n      <span className=\"message-name\">{msg.type === 'user' ? userName : 'Bot'}</span>\r\n      <span className=\"message-text\">{msg.text}</span>\r\n    </div>\r\n  ))}\r\n</div>\r\n      <div className=\"chat-input\">\r\n      <textarea\r\n  value={userInput}\r\n  onChange={(e) => setUserInput(e.target.value)}\r\n  onKeyDown={(e) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      if (!disableSend) {\r\n        sendMessage();\r\n      }\r\n    }\r\n  }}\r\n  disabled={disableSend}\r\n  placeholder=\"Type your message here...\"\r\n/>\r\n<button onClick={sendMessage} disabled={!userInput.trim() || disableSend}>\r\n  Send\r\n</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatComponent;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}