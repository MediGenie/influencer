{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import'./ChatComponent.css';// Assume you have a CSS file for styles\nimport{io}from'socket.io-client';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const ChatComponent=()=>{const[userInput,setUserInput]=useState('');const[disableSend,setDisableSend]=useState(false);const[selectedVoice,setSelectedVoice]=useState('');const[selectedLanguage,setSelectedLanguage]=useState('');const[chatMessages,setChatMessages]=useState([]);const[voices,setVoices]=useState([]);const[languages,setLanguages]=useState([]);const[msgId,setMsgId]=useState(0);const audioPlayerRef=useRef(null);const voiceRef=useRef(null);const[userName,setUserName]=useState('User');const[audioQueue,setAudiQueue]=useState([]);audioPlayerRef.current=new Audio();const[isLoading,setIsLoading]=useState(false);const[selectedVoiceName,setSelectedVoiceName]=useState('');const ref=useRef(null);ref.current=msgId;useEffect(()=>{setAudiQueue([]);fetchData();const socket=io('http://beta.medigenie.ai',{path:'/chat-ws',transports:['websocket'],autoConnect:true});socket.on('connect',()=>{console.log('connected');});socket.on('error',error=>{console.log('error',error);});socket.on(\"\".concat(userName),handleIncomingMessage);return()=>{socket.off(\"\".concat(userName),handleIncomingMessage);socket.disconnect();};},[]);const handleVoiceChange=e=>{var _voices$find;const selectedVoiceValue=e.target.value;setSelectedVoice(selectedVoiceValue);const selectedVoiceLabel=((_voices$find=voices.find(voice=>voice.value===selectedVoiceValue))===null||_voices$find===void 0?void 0:_voices$find.label)||'';setSelectedVoiceName(selectedVoiceLabel);};const fetchData=async()=>{try{console.log('Fetching config data from server...');const response=await fetch('http://beta.medigenie.ai/config');if(response.ok){const data=await response.json();const voiceEntries=Object.entries(data.voices).map(_ref=>{let[label,value]=_ref;return{label,value};});const languageEntries=Object.entries(data.languages).map(_ref2=>{let[label,value]=_ref2;return{label,value};});setVoices(voiceEntries);setLanguages(languageEntries);// Set default selected values\nif(voiceEntries.length>0){const firstVoice=voiceEntries[0];setSelectedVoice(firstVoice.value);setSelectedVoiceName(firstVoice.label);}if(languageEntries.length>0){setSelectedLanguage(languageEntries[0].value);}}else{console.error('Failed to fetch data from the server:',response.statusText);}}catch(error){console.error('An error occurred while fetching data:',error);}};const handleIncomingAudio=async data=>{if(data){setAudiQueue(prevAudioQueue=>{// Create a new copy of the array with the updated data\nconst updatedItems=[...prevAudioQueue,data];return updatedItems;});}};const[isPlaying,setIsPlaying]=useState(false);useEffect(()=>{if(!isPlaying&&audioQueue.length>0){const nextAudio=audioQueue[0];playAudio(nextAudio.audioData);// Only play audio, do not set text here\nsetAudiQueue(prevQueue=>prevQueue.slice(1));// Remove the played audio from the queue\n}},[audioQueue,isPlaying]);const playAudio=base64Data=>{setIsPlaying(true);// Play the audio\nconst audio=new Audio('data:audio/mpeg;base64,'+base64Data);audio.onended=()=>setIsPlaying(false);audioPlayerRef.current=audio;audioPlayerRef.current.play();};useEffect(()=>{// Scroll to the bottom of the chat container whenever chatMessages change\nif(chatContainerRef.current){chatContainerRef.current.scrollTop=chatContainerRef.current.scrollHeight;}},[chatMessages]);const chatContainerRef=useRef(null);useEffect(()=>{// Scroll to the bottom of the chat container whenever chatMessages change\nchatContainerRef.current.scrollTop=chatContainerRef.current.scrollHeight;},[chatMessages]);useEffect(()=>{console.log('Voices:',voices);console.log('Languages:',languages);},[voices,languages]);const sendMessage=async()=>{if(!userInput.trim()){console.log('No input to send');return;}setDisableSend(true);setIsLoading(true);setMsgId(prev=>prev+1);try{// Combine user input with language code if necessary\n// For example, 'en:Hello' if English is selected.\nconst combinedInput=\"\".concat(selectedLanguage,\":\").concat(userInput);setChatMessages(previousMessages=>previousMessages.concat({type:'user',name:userName,text:userInput}));setUserInput('');const shouldStream=true;// Prepare the request body by including the combined input\nconst requestBody={user_input:combinedInput,selected_voice:selectedVoice,selected_language:selectedLanguage,// You might not need to send this separately now\nuserName:userName,// we send this for socket connection\nstream:shouldStream};const response=await fetch('http://beta.medigenie.ai/chat',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(requestBody)});setDisableSend(false);if(response.ok){const responseData=await response.json();console.log('Response data from POST /chat:',responseData);console.log('stream finished.');if(!shouldStream){setChatMessages(prevMessages=>[{type:'user',name:userName,text:userInput},{type:'bot',text:responseData.text}]);}}else{console.error('Failed to send message to the server:',response.statusText);}}catch(error){setDisableSend(false);console.error('An error occurred:',error);}// Clear the user input after sending the message\nsetUserInput('');setIsLoading(false);};const handleIncomingMessage=data=>{console.log('Incoming message data:',data);// If there's audio data, add it to the audioQueue state\nif(data.audio){setAudiQueue(prevAudioQueue=>[...prevAudioQueue,{audioData:data.audio}]);}console.log('handleIncomingMessage::'+JSON.stringify(data));setChatMessages(prevMessages=>{console.log('Previous messages:',prevMessages);// Find if the incoming message is a continuation of the last bot message\nconst lastMessage=prevMessages[prevMessages.length-1];let updatedMessages=prevMessages.slice();// Create a copy of the previous messages\nif(lastMessage&&lastMessage.type==='bot'&&lastMessage._id===data._id){// Update the last bot message text\nlastMessage.text+=data.text;console.log(chatMessages);// Update the copy of the messages with the modified last message\nupdatedMessages[prevMessages.length-1]=lastMessage;}else{// Add a new bot message\nconsole.log('Updated messages:',prevMessages);// Add the new message to the copy of messages\nupdatedMessages.push(data);}return updatedMessages;// Return the copy of the messages with the applied changes\n});};const handleLanguageChange=e=>{console.log('Language selected:',e.target.value);setSelectedLanguage(e.target.value);};useEffect(()=>{console.log('Selected language state updated to:',selectedLanguage);},[selectedLanguage]);return/*#__PURE__*/_jsxs(\"div\",{className:\"chat-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat-config\",children:[/*#__PURE__*/_jsx(\"select\",{id:\"voices\",value:selectedVoice,onChange:handleVoiceChange,children:voices.map((voice,index)=>/*#__PURE__*/_jsx(\"option\",{value:voice.value,children:voice.label},index))}),/*#__PURE__*/_jsx(\"select\",{id:\"languages\",value:selectedLanguage,onChange:handleLanguageChange,children:languages.map((language,index)=>/*#__PURE__*/_jsx(\"option\",{value:language.value,children:language.label},index))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-messages\",ref:chatContainerRef,children:[chatMessages.map((msg,index)=>msg.text&&/*#__PURE__*/_jsxs(\"div\",{className:\"message \".concat(msg.type),children:[/*#__PURE__*/_jsx(\"span\",{className:\"message-name \".concat(msg.type==='bot'?'bot-name':''),children:msg.type==='user'?'':\"\".concat(selectedVoiceName,\": \")}),/*#__PURE__*/_jsx(\"span\",{className:\"message-text\",children:msg.text})]},index)),isLoading&&/*#__PURE__*/_jsx(\"div\",{className:\"message bot\",children:/*#__PURE__*/_jsx(\"span\",{className:\"message-text\",children:\"\".concat(selectedVoiceName,\" is thinking...\")})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-input\",children:[/*#__PURE__*/_jsx(\"textarea\",{value:userInput,onChange:e=>setUserInput(e.target.value),onKeyDown:e=>{if(e.key==='Enter'&&!e.shiftKey){e.preventDefault();if(!disableSend){sendMessage();}}},disabled:disableSend,placeholder:\"\\uB098\\uC5D0 \\uB300\\uD574\\uC11C \\uBB3C\\uC5B4\\uBD10~\"}),/*#__PURE__*/_jsx(\"button\",{onClick:sendMessage,disabled:!userInput.trim()||disableSend,children:\"Send\"})]})]});};export default ChatComponent;","map":{"version":3,"names":["React","useState","useEffect","useRef","io","jsx","_jsx","jsxs","_jsxs","ChatComponent","userInput","setUserInput","disableSend","setDisableSend","selectedVoice","setSelectedVoice","selectedLanguage","setSelectedLanguage","chatMessages","setChatMessages","voices","setVoices","languages","setLanguages","msgId","setMsgId","audioPlayerRef","voiceRef","userName","setUserName","audioQueue","setAudiQueue","current","Audio","isLoading","setIsLoading","selectedVoiceName","setSelectedVoiceName","ref","fetchData","socket","path","transports","autoConnect","on","console","log","error","concat","handleIncomingMessage","off","disconnect","handleVoiceChange","e","_voices$find","selectedVoiceValue","target","value","selectedVoiceLabel","find","voice","label","response","fetch","ok","data","json","voiceEntries","Object","entries","map","_ref","languageEntries","_ref2","length","firstVoice","statusText","handleIncomingAudio","prevAudioQueue","updatedItems","isPlaying","setIsPlaying","nextAudio","playAudio","audioData","prevQueue","slice","base64Data","audio","onended","play","chatContainerRef","scrollTop","scrollHeight","sendMessage","trim","prev","combinedInput","previousMessages","type","name","text","shouldStream","requestBody","user_input","selected_voice","selected_language","stream","method","headers","body","JSON","stringify","responseData","prevMessages","lastMessage","updatedMessages","_id","push","handleLanguageChange","className","children","id","onChange","index","language","msg","onKeyDown","key","shiftKey","preventDefault","disabled","placeholder","onClick"],"sources":["/home/ubuntu/influencer/influencer/influencer/frontend/src/components/ChatComponent.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './ChatComponent.css'; // Assume you have a CSS file for styles\nimport { io } from 'socket.io-client';\n\nconst ChatComponent = () => {\n  const [userInput, setUserInput] = useState('');\n  const [disableSend, setDisableSend] = useState(false);\n  const [selectedVoice, setSelectedVoice] = useState('');\n  const [selectedLanguage, setSelectedLanguage] = useState('');\n  const [chatMessages, setChatMessages] = useState([]);\n  const [voices, setVoices] = useState([]);\n  const [languages, setLanguages] = useState([]);\n  const [msgId, setMsgId] = useState(0);\n  const audioPlayerRef = useRef(null);\n  const voiceRef = useRef(null);\n  const [userName, setUserName] = useState('User');\n  const [audioQueue, setAudiQueue] = useState([])\n  audioPlayerRef.current = new Audio()\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedVoiceName, setSelectedVoiceName] = useState('');\n  \n  const ref = useRef(null);\n  ref.current = msgId;\n\n  useEffect(() => {\n    setAudiQueue([])\n    fetchData();\n\n    const socket = io('http://beta.medigenie.ai', {\n      path: '/chat-ws',\n      transports: ['websocket'],\n      autoConnect: true,\n    });\n    socket.on('connect', () => {\n      console.log('connected');\n    });\n    socket.on('error', error => {\n      console.log('error', error);\n    });\n    socket.on(`${userName}`, handleIncomingMessage);\n\n    return () => {\n      socket.off(`${userName}`, handleIncomingMessage);\n      socket.disconnect();\n    };\n  }, []);\n\n\n  const handleVoiceChange = (e) => {\n    const selectedVoiceValue = e.target.value;\n    setSelectedVoice(selectedVoiceValue);\n    const selectedVoiceLabel = voices.find(voice => voice.value === selectedVoiceValue)?.label || '';\n    setSelectedVoiceName(selectedVoiceLabel);\n  };\n\n  const fetchData = async () => {\n    try {\n      console.log('Fetching config data from server...');\n      const response = await fetch('http://beta.medigenie.ai/config');\n      if (response.ok) {\n        const data = await response.json();\n        const voiceEntries = Object.entries(data.voices).map(([label, value]) => ({ label, value }));\n        const languageEntries = Object.entries(data.languages).map(([label, value]) => ({ label, value }));\n\n        setVoices(voiceEntries);\n        setLanguages(languageEntries);\n\n        // Set default selected values\n        if (voiceEntries.length > 0) {\n          const firstVoice = voiceEntries[0];\n          setSelectedVoice(firstVoice.value);\n          setSelectedVoiceName(firstVoice.label);\n        }\n        if (languageEntries.length > 0) {\n          setSelectedLanguage(languageEntries[0].value);\n        }\n      } else {\n        console.error('Failed to fetch data from the server:', response.statusText);\n      }\n    } catch (error) {\n      console.error('An error occurred while fetching data:', error);\n    }\n  };\n\n  const handleIncomingAudio = async (data) => {\n      if (data) {\n        setAudiQueue((prevAudioQueue) => {\n          // Create a new copy of the array with the updated data\n          const updatedItems = [...prevAudioQueue, data];\n          return updatedItems;\n        });\n      }\n  }\n\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  useEffect(() => {\n    if (!isPlaying && audioQueue.length > 0) {\n      const nextAudio = audioQueue[0];\n      playAudio(nextAudio.audioData); // Only play audio, do not set text here\n      setAudiQueue(prevQueue => prevQueue.slice(1)); // Remove the played audio from the queue\n    }\n  }, [audioQueue, isPlaying]);\n\n  const playAudio = (base64Data) => {\n    setIsPlaying(true);\n\n    // Play the audio\n    const audio = new Audio('data:audio/mpeg;base64,' + base64Data);\n    audio.onended = () => setIsPlaying(false);\n    audioPlayerRef.current = audio;\n    audioPlayerRef.current.play();\n  };\n\n  useEffect(() => {\n    // Scroll to the bottom of the chat container whenever chatMessages change\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n\n  const chatContainerRef = useRef(null);\n\n  useEffect(() => {\n    // Scroll to the bottom of the chat container whenever chatMessages change\n    chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n  }, [chatMessages]);\n\n\n  useEffect(() => {\n    console.log('Voices:', voices);\n    console.log('Languages:', languages);\n  }, [voices, languages]);\n\n  const sendMessage = async () => {\n    if (!userInput.trim()) {\n      console.log('No input to send');\n      return;\n    }\n    setDisableSend(true);\n    setIsLoading(true);\n    setMsgId(prev => prev + 1);\n\n    try {\n      // Combine user input with language code if necessary\n      // For example, 'en:Hello' if English is selected.\n      const combinedInput = `${selectedLanguage}:${userInput}`;\n      setChatMessages(previousMessages =>\n        previousMessages.concat({ type: 'user', name: userName, text: userInput })\n      );\n      setUserInput('');\n      const shouldStream = true;\n      // Prepare the request body by including the combined input\n      const requestBody = {\n        user_input: combinedInput,\n        selected_voice: selectedVoice,\n        selected_language: selectedLanguage, // You might not need to send this separately now\n        userName: userName, // we send this for socket connection\n        stream: shouldStream,\n      };\n\n      const response = await fetch('http://beta.medigenie.ai/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody),\n      });\n      setDisableSend(false);\n\n      if (response.ok) {\n        const responseData = await response.json();\n        console.log('Response data from POST /chat:', responseData);\n        console.log('stream finished.');\n        if (!shouldStream) {\n          setChatMessages(prevMessages => [\n            { type: 'user', name: userName, text: userInput },\n            { type: 'bot', text: responseData.text },\n          ]);\n        }\n      } else {\n        console.error('Failed to send message to the server:', response.statusText);\n      }\n    } catch (error) {\n      setDisableSend(false);\n      console.error('An error occurred:', error);\n    }\n\n    // Clear the user input after sending the message\n    setUserInput('');\n    setIsLoading(false);\n  };\n\n  const handleIncomingMessage = (data) => {\n    console.log('Incoming message data:', data);\n    // If there's audio data, add it to the audioQueue state\n    if (data.audio) {\n      setAudiQueue(prevAudioQueue => [...prevAudioQueue, { audioData: data.audio }]);\n    }\n\n    console.log('handleIncomingMessage::' + JSON.stringify(data));\n\n    setChatMessages((prevMessages) => {\n      console.log('Previous messages:', prevMessages);\n      // Find if the incoming message is a continuation of the last bot message\n      const lastMessage = prevMessages[prevMessages.length - 1];\n      let updatedMessages = prevMessages.slice(); // Create a copy of the previous messages\n\n      if (lastMessage && lastMessage.type === 'bot' && lastMessage._id === data._id) {\n          // Update the last bot message text\n          lastMessage.text += data.text;\n          console.log(chatMessages);\n          // Update the copy of the messages with the modified last message\n          updatedMessages[prevMessages.length - 1] = lastMessage;\n      } else {\n          // Add a new bot message\n          console.log('Updated messages:', prevMessages);\n          // Add the new message to the copy of messages\n          updatedMessages.push(data);\n      }\n\n      return updatedMessages; // Return the copy of the messages with the applied changes\n  });\n};\n\n\n  const handleLanguageChange = (e) => {\n    console.log('Language selected:', e.target.value);\n    setSelectedLanguage(e.target.value);\n  };\n\n  useEffect(() => {\n    console.log('Selected language state updated to:', selectedLanguage);\n  }, [selectedLanguage]);\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-config\">\n      <select id=\"voices\" value={selectedVoice} onChange={handleVoiceChange}>\n  {voices.map((voice, index) => (\n    <option key={index} value={voice.value}>\n      {voice.label}\n    </option>\n  ))}\n</select>\n        <select id=\"languages\" value={selectedLanguage} onChange={handleLanguageChange}>\n  {languages.map((language, index) => (\n    <option key={index} value={language.value}>\n      {language.label}\n    </option>\n  ))}\n</select>\n      </div>\n      <div className=\"chat-messages\" ref={chatContainerRef}>\n     {chatMessages.map((msg, index) => (\n  msg.text && (\n    <div key={index} className={`message ${msg.type}`}>\n      <span className={`message-name ${msg.type === 'bot' ? 'bot-name' : ''}`}>\n        {msg.type === 'user' ? '' : `${selectedVoiceName}: `}\n      </span>\n      <span className=\"message-text\">{msg.text}</span>\n    </div>\n  )\n))}\n           {isLoading && (\n  <div className=\"message bot\">\n    <span className=\"message-text\">{`${selectedVoiceName} is thinking...`}</span>\n  </div>\n)}\n      </div>\n      <div className=\"chat-input\">\n      <textarea\n  value={userInput}\n  onChange={(e) => setUserInput(e.target.value)}\n  onKeyDown={(e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      if (!disableSend) {\n        sendMessage();\n      }\n    }\n  }}\n  disabled={disableSend}\n  placeholder=\"나에 대해서 물어봐~\"\n/>\n<button onClick={sendMessage} disabled={!userInput.trim() || disableSend}>\n  Send\n</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatComponent;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAC1D,MAAO,qBAAqB,CAAE;AAC9B,OAASC,EAAE,KAAQ,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAEtC,KAAM,CAAAC,aAAa,CAAGA,CAAA,GAAM,CAC1B,KAAM,CAACC,SAAS,CAAEC,YAAY,CAAC,CAAGV,QAAQ,CAAC,EAAE,CAAC,CAC9C,KAAM,CAACW,WAAW,CAAEC,cAAc,CAAC,CAAGZ,QAAQ,CAAC,KAAK,CAAC,CACrD,KAAM,CAACa,aAAa,CAAEC,gBAAgB,CAAC,CAAGd,QAAQ,CAAC,EAAE,CAAC,CACtD,KAAM,CAACe,gBAAgB,CAAEC,mBAAmB,CAAC,CAAGhB,QAAQ,CAAC,EAAE,CAAC,CAC5D,KAAM,CAACiB,YAAY,CAAEC,eAAe,CAAC,CAAGlB,QAAQ,CAAC,EAAE,CAAC,CACpD,KAAM,CAACmB,MAAM,CAAEC,SAAS,CAAC,CAAGpB,QAAQ,CAAC,EAAE,CAAC,CACxC,KAAM,CAACqB,SAAS,CAAEC,YAAY,CAAC,CAAGtB,QAAQ,CAAC,EAAE,CAAC,CAC9C,KAAM,CAACuB,KAAK,CAAEC,QAAQ,CAAC,CAAGxB,QAAQ,CAAC,CAAC,CAAC,CACrC,KAAM,CAAAyB,cAAc,CAAGvB,MAAM,CAAC,IAAI,CAAC,CACnC,KAAM,CAAAwB,QAAQ,CAAGxB,MAAM,CAAC,IAAI,CAAC,CAC7B,KAAM,CAACyB,QAAQ,CAAEC,WAAW,CAAC,CAAG5B,QAAQ,CAAC,MAAM,CAAC,CAChD,KAAM,CAAC6B,UAAU,CAAEC,YAAY,CAAC,CAAG9B,QAAQ,CAAC,EAAE,CAAC,CAC/CyB,cAAc,CAACM,OAAO,CAAG,GAAI,CAAAC,KAAK,CAAC,CAAC,CACpC,KAAM,CAACC,SAAS,CAAEC,YAAY,CAAC,CAAGlC,QAAQ,CAAC,KAAK,CAAC,CACjD,KAAM,CAACmC,iBAAiB,CAAEC,oBAAoB,CAAC,CAAGpC,QAAQ,CAAC,EAAE,CAAC,CAE9D,KAAM,CAAAqC,GAAG,CAAGnC,MAAM,CAAC,IAAI,CAAC,CACxBmC,GAAG,CAACN,OAAO,CAAGR,KAAK,CAEnBtB,SAAS,CAAC,IAAM,CACd6B,YAAY,CAAC,EAAE,CAAC,CAChBQ,SAAS,CAAC,CAAC,CAEX,KAAM,CAAAC,MAAM,CAAGpC,EAAE,CAAC,0BAA0B,CAAE,CAC5CqC,IAAI,CAAE,UAAU,CAChBC,UAAU,CAAE,CAAC,WAAW,CAAC,CACzBC,WAAW,CAAE,IACf,CAAC,CAAC,CACFH,MAAM,CAACI,EAAE,CAAC,SAAS,CAAE,IAAM,CACzBC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC,CAC1B,CAAC,CAAC,CACFN,MAAM,CAACI,EAAE,CAAC,OAAO,CAAEG,KAAK,EAAI,CAC1BF,OAAO,CAACC,GAAG,CAAC,OAAO,CAAEC,KAAK,CAAC,CAC7B,CAAC,CAAC,CACFP,MAAM,CAACI,EAAE,IAAAI,MAAA,CAAIpB,QAAQ,EAAIqB,qBAAqB,CAAC,CAE/C,MAAO,IAAM,CACXT,MAAM,CAACU,GAAG,IAAAF,MAAA,CAAIpB,QAAQ,EAAIqB,qBAAqB,CAAC,CAChDT,MAAM,CAACW,UAAU,CAAC,CAAC,CACrB,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAGN,KAAM,CAAAC,iBAAiB,CAAIC,CAAC,EAAK,KAAAC,YAAA,CAC/B,KAAM,CAAAC,kBAAkB,CAAGF,CAAC,CAACG,MAAM,CAACC,KAAK,CACzC1C,gBAAgB,CAACwC,kBAAkB,CAAC,CACpC,KAAM,CAAAG,kBAAkB,CAAG,EAAAJ,YAAA,CAAAlC,MAAM,CAACuC,IAAI,CAACC,KAAK,EAAIA,KAAK,CAACH,KAAK,GAAKF,kBAAkB,CAAC,UAAAD,YAAA,iBAAxDA,YAAA,CAA0DO,KAAK,GAAI,EAAE,CAChGxB,oBAAoB,CAACqB,kBAAkB,CAAC,CAC1C,CAAC,CAED,KAAM,CAAAnB,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAI,CACFM,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC,CAClD,KAAM,CAAAgB,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,iCAAiC,CAAC,CAC/D,GAAID,QAAQ,CAACE,EAAE,CAAE,CACf,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAClC,KAAM,CAAAC,YAAY,CAAGC,MAAM,CAACC,OAAO,CAACJ,IAAI,CAAC7C,MAAM,CAAC,CAACkD,GAAG,CAACC,IAAA,MAAC,CAACV,KAAK,CAAEJ,KAAK,CAAC,CAAAc,IAAA,OAAM,CAAEV,KAAK,CAAEJ,KAAM,CAAC,EAAC,CAAC,CAC5F,KAAM,CAAAe,eAAe,CAAGJ,MAAM,CAACC,OAAO,CAACJ,IAAI,CAAC3C,SAAS,CAAC,CAACgD,GAAG,CAACG,KAAA,MAAC,CAACZ,KAAK,CAAEJ,KAAK,CAAC,CAAAgB,KAAA,OAAM,CAAEZ,KAAK,CAAEJ,KAAM,CAAC,EAAC,CAAC,CAElGpC,SAAS,CAAC8C,YAAY,CAAC,CACvB5C,YAAY,CAACiD,eAAe,CAAC,CAE7B;AACA,GAAIL,YAAY,CAACO,MAAM,CAAG,CAAC,CAAE,CAC3B,KAAM,CAAAC,UAAU,CAAGR,YAAY,CAAC,CAAC,CAAC,CAClCpD,gBAAgB,CAAC4D,UAAU,CAAClB,KAAK,CAAC,CAClCpB,oBAAoB,CAACsC,UAAU,CAACd,KAAK,CAAC,CACxC,CACA,GAAIW,eAAe,CAACE,MAAM,CAAG,CAAC,CAAE,CAC9BzD,mBAAmB,CAACuD,eAAe,CAAC,CAAC,CAAC,CAACf,KAAK,CAAC,CAC/C,CACF,CAAC,IAAM,CACLZ,OAAO,CAACE,KAAK,CAAC,uCAAuC,CAAEe,QAAQ,CAACc,UAAU,CAAC,CAC7E,CACF,CAAE,MAAO7B,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAAC,wCAAwC,CAAEA,KAAK,CAAC,CAChE,CACF,CAAC,CAED,KAAM,CAAA8B,mBAAmB,CAAG,KAAO,CAAAZ,IAAI,EAAK,CACxC,GAAIA,IAAI,CAAE,CACRlC,YAAY,CAAE+C,cAAc,EAAK,CAC/B;AACA,KAAM,CAAAC,YAAY,CAAG,CAAC,GAAGD,cAAc,CAAEb,IAAI,CAAC,CAC9C,MAAO,CAAAc,YAAY,CACrB,CAAC,CAAC,CACJ,CACJ,CAAC,CAED,KAAM,CAACC,SAAS,CAAEC,YAAY,CAAC,CAAGhF,QAAQ,CAAC,KAAK,CAAC,CAEjDC,SAAS,CAAC,IAAM,CACd,GAAI,CAAC8E,SAAS,EAAIlD,UAAU,CAAC4C,MAAM,CAAG,CAAC,CAAE,CACvC,KAAM,CAAAQ,SAAS,CAAGpD,UAAU,CAAC,CAAC,CAAC,CAC/BqD,SAAS,CAACD,SAAS,CAACE,SAAS,CAAC,CAAE;AAChCrD,YAAY,CAACsD,SAAS,EAAIA,SAAS,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAE;AACjD,CACF,CAAC,CAAE,CAACxD,UAAU,CAAEkD,SAAS,CAAC,CAAC,CAE3B,KAAM,CAAAG,SAAS,CAAII,UAAU,EAAK,CAChCN,YAAY,CAAC,IAAI,CAAC,CAElB;AACA,KAAM,CAAAO,KAAK,CAAG,GAAI,CAAAvD,KAAK,CAAC,yBAAyB,CAAGsD,UAAU,CAAC,CAC/DC,KAAK,CAACC,OAAO,CAAG,IAAMR,YAAY,CAAC,KAAK,CAAC,CACzCvD,cAAc,CAACM,OAAO,CAAGwD,KAAK,CAC9B9D,cAAc,CAACM,OAAO,CAAC0D,IAAI,CAAC,CAAC,CAC/B,CAAC,CAEDxF,SAAS,CAAC,IAAM,CACd;AACA,GAAIyF,gBAAgB,CAAC3D,OAAO,CAAE,CAC5B2D,gBAAgB,CAAC3D,OAAO,CAAC4D,SAAS,CAAGD,gBAAgB,CAAC3D,OAAO,CAAC6D,YAAY,CAC5E,CACF,CAAC,CAAE,CAAC3E,YAAY,CAAC,CAAC,CAElB,KAAM,CAAAyE,gBAAgB,CAAGxF,MAAM,CAAC,IAAI,CAAC,CAErCD,SAAS,CAAC,IAAM,CACd;AACAyF,gBAAgB,CAAC3D,OAAO,CAAC4D,SAAS,CAAGD,gBAAgB,CAAC3D,OAAO,CAAC6D,YAAY,CAC5E,CAAC,CAAE,CAAC3E,YAAY,CAAC,CAAC,CAGlBhB,SAAS,CAAC,IAAM,CACd2C,OAAO,CAACC,GAAG,CAAC,SAAS,CAAE1B,MAAM,CAAC,CAC9ByB,OAAO,CAACC,GAAG,CAAC,YAAY,CAAExB,SAAS,CAAC,CACtC,CAAC,CAAE,CAACF,MAAM,CAAEE,SAAS,CAAC,CAAC,CAEvB,KAAM,CAAAwE,WAAW,CAAG,KAAAA,CAAA,GAAY,CAC9B,GAAI,CAACpF,SAAS,CAACqF,IAAI,CAAC,CAAC,CAAE,CACrBlD,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC,CAC/B,OACF,CACAjC,cAAc,CAAC,IAAI,CAAC,CACpBsB,YAAY,CAAC,IAAI,CAAC,CAClBV,QAAQ,CAACuE,IAAI,EAAIA,IAAI,CAAG,CAAC,CAAC,CAE1B,GAAI,CACF;AACA;AACA,KAAM,CAAAC,aAAa,IAAAjD,MAAA,CAAMhC,gBAAgB,MAAAgC,MAAA,CAAItC,SAAS,CAAE,CACxDS,eAAe,CAAC+E,gBAAgB,EAC9BA,gBAAgB,CAAClD,MAAM,CAAC,CAAEmD,IAAI,CAAE,MAAM,CAAEC,IAAI,CAAExE,QAAQ,CAAEyE,IAAI,CAAE3F,SAAU,CAAC,CAC3E,CAAC,CACDC,YAAY,CAAC,EAAE,CAAC,CAChB,KAAM,CAAA2F,YAAY,CAAG,IAAI,CACzB;AACA,KAAM,CAAAC,WAAW,CAAG,CAClBC,UAAU,CAAEP,aAAa,CACzBQ,cAAc,CAAE3F,aAAa,CAC7B4F,iBAAiB,CAAE1F,gBAAgB,CAAE;AACrCY,QAAQ,CAAEA,QAAQ,CAAE;AACpB+E,MAAM,CAAEL,YACV,CAAC,CAED,KAAM,CAAAxC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,+BAA+B,CAAE,CAC5D6C,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACT,WAAW,CAClC,CAAC,CAAC,CACF1F,cAAc,CAAC,KAAK,CAAC,CAErB,GAAIiD,QAAQ,CAACE,EAAE,CAAE,CACf,KAAM,CAAAiD,YAAY,CAAG,KAAM,CAAAnD,QAAQ,CAACI,IAAI,CAAC,CAAC,CAC1CrB,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAEmE,YAAY,CAAC,CAC3DpE,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC,CAC/B,GAAI,CAACwD,YAAY,CAAE,CACjBnF,eAAe,CAAC+F,YAAY,EAAI,CAC9B,CAAEf,IAAI,CAAE,MAAM,CAAEC,IAAI,CAAExE,QAAQ,CAAEyE,IAAI,CAAE3F,SAAU,CAAC,CACjD,CAAEyF,IAAI,CAAE,KAAK,CAAEE,IAAI,CAAEY,YAAY,CAACZ,IAAK,CAAC,CACzC,CAAC,CACJ,CACF,CAAC,IAAM,CACLxD,OAAO,CAACE,KAAK,CAAC,uCAAuC,CAAEe,QAAQ,CAACc,UAAU,CAAC,CAC7E,CACF,CAAE,MAAO7B,KAAK,CAAE,CACdlC,cAAc,CAAC,KAAK,CAAC,CACrBgC,OAAO,CAACE,KAAK,CAAC,oBAAoB,CAAEA,KAAK,CAAC,CAC5C,CAEA;AACApC,YAAY,CAAC,EAAE,CAAC,CAChBwB,YAAY,CAAC,KAAK,CAAC,CACrB,CAAC,CAED,KAAM,CAAAc,qBAAqB,CAAIgB,IAAI,EAAK,CACtCpB,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAEmB,IAAI,CAAC,CAC3C;AACA,GAAIA,IAAI,CAACuB,KAAK,CAAE,CACdzD,YAAY,CAAC+C,cAAc,EAAI,CAAC,GAAGA,cAAc,CAAE,CAAEM,SAAS,CAAEnB,IAAI,CAACuB,KAAM,CAAC,CAAC,CAAC,CAChF,CAEA3C,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAGiE,IAAI,CAACC,SAAS,CAAC/C,IAAI,CAAC,CAAC,CAE7D9C,eAAe,CAAE+F,YAAY,EAAK,CAChCrE,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAEoE,YAAY,CAAC,CAC/C;AACA,KAAM,CAAAC,WAAW,CAAGD,YAAY,CAACA,YAAY,CAACxC,MAAM,CAAG,CAAC,CAAC,CACzD,GAAI,CAAA0C,eAAe,CAAGF,YAAY,CAAC5B,KAAK,CAAC,CAAC,CAAE;AAE5C,GAAI6B,WAAW,EAAIA,WAAW,CAAChB,IAAI,GAAK,KAAK,EAAIgB,WAAW,CAACE,GAAG,GAAKpD,IAAI,CAACoD,GAAG,CAAE,CAC3E;AACAF,WAAW,CAACd,IAAI,EAAIpC,IAAI,CAACoC,IAAI,CAC7BxD,OAAO,CAACC,GAAG,CAAC5B,YAAY,CAAC,CACzB;AACAkG,eAAe,CAACF,YAAY,CAACxC,MAAM,CAAG,CAAC,CAAC,CAAGyC,WAAW,CAC1D,CAAC,IAAM,CACH;AACAtE,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAEoE,YAAY,CAAC,CAC9C;AACAE,eAAe,CAACE,IAAI,CAACrD,IAAI,CAAC,CAC9B,CAEA,MAAO,CAAAmD,eAAe,CAAE;AAC5B,CAAC,CAAC,CACJ,CAAC,CAGC,KAAM,CAAAG,oBAAoB,CAAIlE,CAAC,EAAK,CAClCR,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAEO,CAAC,CAACG,MAAM,CAACC,KAAK,CAAC,CACjDxC,mBAAmB,CAACoC,CAAC,CAACG,MAAM,CAACC,KAAK,CAAC,CACrC,CAAC,CAEDvD,SAAS,CAAC,IAAM,CACd2C,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAE9B,gBAAgB,CAAC,CACtE,CAAC,CAAE,CAACA,gBAAgB,CAAC,CAAC,CAEtB,mBACER,KAAA,QAAKgH,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC7BjH,KAAA,QAAKgH,SAAS,CAAC,aAAa,CAAAC,QAAA,eAC5BnH,IAAA,WAAQoH,EAAE,CAAC,QAAQ,CAACjE,KAAK,CAAE3C,aAAc,CAAC6G,QAAQ,CAAEvE,iBAAkB,CAAAqE,QAAA,CACzErG,MAAM,CAACkD,GAAG,CAAC,CAACV,KAAK,CAAEgE,KAAK,gBACvBtH,IAAA,WAAoBmD,KAAK,CAAEG,KAAK,CAACH,KAAM,CAAAgE,QAAA,CACpC7D,KAAK,CAACC,KAAK,EADD+D,KAEL,CACT,CAAC,CACI,CAAC,cACDtH,IAAA,WAAQoH,EAAE,CAAC,WAAW,CAACjE,KAAK,CAAEzC,gBAAiB,CAAC2G,QAAQ,CAAEJ,oBAAqB,CAAAE,QAAA,CACpFnG,SAAS,CAACgD,GAAG,CAAC,CAACuD,QAAQ,CAAED,KAAK,gBAC7BtH,IAAA,WAAoBmD,KAAK,CAAEoE,QAAQ,CAACpE,KAAM,CAAAgE,QAAA,CACvCI,QAAQ,CAAChE,KAAK,EADJ+D,KAEL,CACT,CAAC,CACI,CAAC,EACE,CAAC,cACNpH,KAAA,QAAKgH,SAAS,CAAC,eAAe,CAAClF,GAAG,CAAEqD,gBAAiB,CAAA8B,QAAA,EACrDvG,YAAY,CAACoD,GAAG,CAAC,CAACwD,GAAG,CAAEF,KAAK,GAChCE,GAAG,CAACzB,IAAI,eACN7F,KAAA,QAAiBgH,SAAS,YAAAxE,MAAA,CAAa8E,GAAG,CAAC3B,IAAI,CAAG,CAAAsB,QAAA,eAChDnH,IAAA,SAAMkH,SAAS,iBAAAxE,MAAA,CAAkB8E,GAAG,CAAC3B,IAAI,GAAK,KAAK,CAAG,UAAU,CAAG,EAAE,CAAG,CAAAsB,QAAA,CACrEK,GAAG,CAAC3B,IAAI,GAAK,MAAM,CAAG,EAAE,IAAAnD,MAAA,CAAMZ,iBAAiB,MAAI,CAChD,CAAC,cACP9B,IAAA,SAAMkH,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAEK,GAAG,CAACzB,IAAI,CAAO,CAAC,GAJxCuB,KAKL,CAER,CAAC,CACU1F,SAAS,eACnB5B,IAAA,QAAKkH,SAAS,CAAC,aAAa,CAAAC,QAAA,cAC1BnH,IAAA,SAAMkH,SAAS,CAAC,cAAc,CAAAC,QAAA,IAAAzE,MAAA,CAAKZ,iBAAiB,oBAAwB,CAAC,CAC1E,CACN,EACU,CAAC,cACN5B,KAAA,QAAKgH,SAAS,CAAC,YAAY,CAAAC,QAAA,eAC3BnH,IAAA,aACJmD,KAAK,CAAE/C,SAAU,CACjBiH,QAAQ,CAAGtE,CAAC,EAAK1C,YAAY,CAAC0C,CAAC,CAACG,MAAM,CAACC,KAAK,CAAE,CAC9CsE,SAAS,CAAG1E,CAAC,EAAK,CAChB,GAAIA,CAAC,CAAC2E,GAAG,GAAK,OAAO,EAAI,CAAC3E,CAAC,CAAC4E,QAAQ,CAAE,CACpC5E,CAAC,CAAC6E,cAAc,CAAC,CAAC,CAClB,GAAI,CAACtH,WAAW,CAAE,CAChBkF,WAAW,CAAC,CAAC,CACf,CACF,CACF,CAAE,CACFqC,QAAQ,CAAEvH,WAAY,CACtBwH,WAAW,CAAC,qDAAa,CAC1B,CAAC,cACF9H,IAAA,WAAQ+H,OAAO,CAAEvC,WAAY,CAACqC,QAAQ,CAAE,CAACzH,SAAS,CAACqF,IAAI,CAAC,CAAC,EAAInF,WAAY,CAAA6G,QAAA,CAAC,MAE1E,CAAQ,CAAC,EACE,CAAC,EACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAAhH,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}