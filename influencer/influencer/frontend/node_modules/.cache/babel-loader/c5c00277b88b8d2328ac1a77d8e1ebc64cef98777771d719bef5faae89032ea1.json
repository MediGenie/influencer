{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Downloads\\\\\\uCD5C\\uC885\\uC0B0\\uCD9C\\uBB3C (1)\\\\\\uCD5C\\uC885\\uC0B0\\uCD9C\\uBB3C\\\\AI_Plaza-main\\\\influencer\\\\influencer\\\\frontend\\\\src\\\\components\\\\ChatComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './ChatComponent.css'; // Assume you have a CSS file for styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatComponent = () => {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [selectedVoice, setSelectedVoice] = useState('');\n  const [selectedLanguage, setSelectedLanguage] = useState('');\n  const [chatMessages, setChatMessages] = useState([]);\n  const [voices, setVoices] = useState([]);\n  const [languages, setLanguages] = useState([]);\n  const [userName, setUserName] = useState('User');\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        console.log('Fetching config data from server...');\n        const response = await fetch('http://127.0.0.1:5000/config');\n        if (response.ok) {\n          const data = await response.json();\n          const voiceEntries = Object.entries(data.voices).map(([label, value]) => ({\n            label,\n            value\n          }));\n          const languageEntries = Object.entries(data.languages).map(([label, value]) => ({\n            label,\n            value\n          }));\n          setVoices(voiceEntries);\n          setLanguages(languageEntries);\n\n          // Set default selected values\n          setSelectedVoice(voiceEntries.length > 0 ? voiceEntries[0].value : '');\n          setSelectedLanguage(languageEntries.length > 0 ? languageEntries[0].value : '');\n        } else {\n          console.error('Failed to fetch data from the server:', response.statusText);\n        }\n      } catch (error) {\n        console.error('An error occurred while fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const sendMessage = async () => {\n    if (!userInput.trim()) {\n      console.log('No input to send');\n      return;\n    }\n    try {\n      const combinedInput = `${selectedLanguage}:${userInput}`;\n      const requestBody = {\n        user_input: combinedInput,\n        selected_voice: selectedVoice,\n        selected_language: selectedLanguage // This line is needed if your server expects selected_language\n      };\n\n      const response = await fetch('http://127.0.0.1:5000/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n      if (response.ok) {\n        const responseData = await response.json();\n\n        // First, update the chat with the text response from custom GPT\n        setChatMessages(prevMessages => [...prevMessages, {\n          type: 'user',\n          name: userName,\n          text: userInput\n        }, {\n          type: 'bot',\n          text: responseData.text\n        }]);\n\n        // Then, if there is an audio response, play it\n        if (responseData.audio) {\n          const audio = new Audio('data:audio/mpeg;base64,' + responseData.audio);\n          audio.play();\n        }\n      } else {\n        console.error('Failed to send message to the server:', response.statusText);\n      }\n    } catch (error) {\n      console.error('An error occurred:', error);\n    }\n    setUserInput(''); // Clear the input after sending the message\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-config\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"voices\",\n        value: selectedVoice,\n        onChange: e => setSelectedVoice(e.target.value),\n        children: voices.map((voice, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: voice.value,\n          children: voice.label\n        }, `voice-${voice.value}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"languages\",\n        value: selectedLanguage,\n        onChange: e => setSelectedLanguage(e.target.value),\n        children: languages.map((language, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: language.value,\n          children: language.label\n        }, `language-${language.value}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: chatMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.type}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-name\",\n          children: msg.name || 'Bot'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-text\",\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        onKeyDown: e => {\n          if (e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault();\n            sendMessage();\n          }\n        },\n        placeholder: \"Type your message here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        disabled: !userInput.trim(),\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatComponent, \"yNIPJNMuZKioPOZ54Elr/09PMuM=\");\n_c = ChatComponent;\nexport default ChatComponent;\nvar _c;\n$RefreshReg$(_c, \"ChatComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ChatComponent","_s","userInput","setUserInput","selectedVoice","setSelectedVoice","selectedLanguage","setSelectedLanguage","chatMessages","setChatMessages","voices","setVoices","languages","setLanguages","userName","setUserName","fetchData","console","log","response","fetch","ok","data","json","voiceEntries","Object","entries","map","label","value","languageEntries","length","error","statusText","sendMessage","trim","combinedInput","requestBody","user_input","selected_voice","selected_language","method","headers","body","JSON","stringify","responseData","prevMessages","type","name","text","audio","Audio","play","className","children","id","onChange","e","target","voice","index","fileName","_jsxFileName","lineNumber","columnNumber","language","msg","onKeyDown","key","shiftKey","preventDefault","placeholder","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Downloads/최종산출물 (1)/최종산출물/AI_Plaza-main/influencer/influencer/frontend/src/components/ChatComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './ChatComponent.css'; // Assume you have a CSS file for styles\r\n\r\nconst ChatComponent = () => {\r\n  const [userInput, setUserInput] = useState('');\r\n  const [selectedVoice, setSelectedVoice] = useState('');\r\n  const [selectedLanguage, setSelectedLanguage] = useState('');\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [voices, setVoices] = useState([]);\r\n  const [languages, setLanguages] = useState([]);\r\n  const [userName, setUserName] = useState('User');\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        console.log('Fetching config data from server...');\r\n        const response = await fetch('http://127.0.0.1:5000/config');\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          const voiceEntries = Object.entries(data.voices).map(([label, value]) => ({ label, value }));\r\n          const languageEntries = Object.entries(data.languages).map(([label, value]) => ({ label, value }));\r\n          \r\n          setVoices(voiceEntries);\r\n          setLanguages(languageEntries);\r\n          \r\n          // Set default selected values\r\n          setSelectedVoice(voiceEntries.length > 0 ? voiceEntries[0].value : '');\r\n          setSelectedLanguage(languageEntries.length > 0 ? languageEntries[0].value : '');\r\n        } else {\r\n          console.error('Failed to fetch data from the server:', response.statusText);\r\n        }\r\n      } catch (error) {\r\n        console.error('An error occurred while fetching data:', error);\r\n      }\r\n    };\r\n    \r\n    fetchData();\r\n  }, []);\r\n\r\n  const sendMessage = async () => {\r\n    if (!userInput.trim()) {\r\n      console.log('No input to send');\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      const combinedInput = `${selectedLanguage}:${userInput}`;\r\n      const requestBody = {\r\n        user_input: combinedInput,\r\n        selected_voice: selectedVoice,\r\n        selected_language: selectedLanguage, // This line is needed if your server expects selected_language\r\n      };\r\n      \r\n      const response = await fetch('http://127.0.0.1:5000/chat', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(requestBody),\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const responseData = await response.json();\r\n        \r\n        // First, update the chat with the text response from custom GPT\r\n        setChatMessages(prevMessages => [\r\n          ...prevMessages,\r\n          { type: 'user', name: userName, text: userInput },\r\n          { type: 'bot', text: responseData.text },\r\n        ]);\r\n  \r\n        // Then, if there is an audio response, play it\r\n        if (responseData.audio) {\r\n          const audio = new Audio('data:audio/mpeg;base64,' + responseData.audio);\r\n          audio.play();\r\n        }\r\n      } else {\r\n        console.error('Failed to send message to the server:', response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error('An error occurred:', error);\r\n    }\r\n  \r\n    setUserInput(''); // Clear the input after sending the message\r\n  };\r\n  \r\n\r\n\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"chat-config\">\r\n        <select id=\"voices\" value={selectedVoice} onChange={(e) => setSelectedVoice(e.target.value)}>\r\n          {voices.map((voice, index) => (\r\n            <option key={`voice-${voice.value}`} value={voice.value}>\r\n              {voice.label}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <select id=\"languages\" value={selectedLanguage} onChange={(e) => setSelectedLanguage(e.target.value)}>\r\n          {languages.map((language, index) => (\r\n            <option key={`language-${language.value}`} value={language.value}>\r\n              {language.label}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div className=\"chat-messages\">\r\n        {chatMessages.map((msg, index) => (\r\n          <div key={index} className={`message ${msg.type}`}>\r\n            <span className=\"message-name\">{msg.name || 'Bot'}</span>\r\n            <span className=\"message-text\">{msg.text}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"chat-input\">\r\n        <textarea\r\n          value={userInput}\r\n          onChange={(e) => setUserInput(e.target.value)}\r\n          onKeyDown={(e) => {\r\n            if (e.key === 'Enter' && !e.shiftKey) {\r\n              e.preventDefault();\r\n              sendMessage();\r\n            }\r\n          }}\r\n          placeholder=\"Type your message here...\"\r\n        />\r\n        <button onClick={sendMessage} disabled={!userInput.trim()}>\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}